(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "arr" defined at bubble.ads:2, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "arr" defined at bubble.ads:2, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "arr" defined at bubble.ads:2, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "arr" defined at bubble.ads:2, created in Gnat2Why.Types.Translate_Type *)
module Bubble__arr
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__integer.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type arr =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type arr__ref =
  { mutable arr__content "model_trace:" "name:" : arr }
 
 function arr__ref___projection 
   (a : arr__ref) : arr =
  a.arr__content
 
 meta "model_projection" function arr__ref___projection
 
 meta "inline : no" function arr__ref___projection
 
 val arr__havoc 
   (x : arr__ref) : unit
  writes {x}

end

(* Module for defining the constant "a" defined at bubble.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Bubble__sorted__a
 use import "_gnatprove_standard".Main
 use        Bubble__arr

 function a #"bubble.ads" 4 0 0#"model_projected" "model_trace:2536" "name:A" 
   : Bubble__arr.arr
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at bubble.ads:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sorted__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T20s" defined at bubble.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sorted__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "sorted" defined at bubble.ads:4, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Bubble__sorted
 use import "_gnatprove_standard".Main
 use        Bubble__arr

 function sorted 
   (a : Bubble__arr.arr) : bool
 
 predicate sorted__function_guard 
   (result : bool) (a : Bubble__arr.arr) 

end

(* Module for axiomatizing type "T15s" defined at bubble.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sorted__L14s__T15s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t15s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t15s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t15s__ref =
  { mutable t15s__content "model_trace:" "name:" : t15s }
 
 function t15s__ref___projection 
   (a : t15s__ref) : t15s =
  a.t15s__content
 
 meta "model_projection" function t15s__ref___projection
 
 meta "inline : no" function t15s__ref___projection
 
 val t15s__havoc 
   (x : t15s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at bubble.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sorted__L3s__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4s__ref =
  { mutable t4s__content "model_trace:" "name:" : t4s }
 
 function t4s__ref___projection 
   (a : t4s__ref) : t4s =
  a.t4s__content
 
 meta "model_projection" function t4s__ref___projection
 
 meta "inline : no" function t4s__ref___projection
 
 val t4s__havoc 
   (x : t4s__ref) : unit
  writes {x}

end

(* Module for defining the constant "a" defined at bubble.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Bubble__bubbled__a
 use import "_gnatprove_standard".Main
 use        Bubble__arr

 function a #"bubble.ads" 10 0 0#"model_projected" "name:A" "model_trace:2627" 
   : Bubble__arr.arr
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at bubble.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__bubbled__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T22s" defined at bubble.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Bubble__bubbled__L21s__T22s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22s__ref =
  { mutable t22s__content "model_trace:" "name:" : t22s }
 
 function t22s__ref___projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref___projection
 
 meta "inline : no" function t22s__ref___projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "bubbled" defined at bubble.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Bubble__bubbled
 use import "_gnatprove_standard".Main
 use        Bubble__arr

 function bubbled 
   (a : Bubble__arr.arr) : bool
 
 predicate bubbled__function_guard 
   (result : bool) (a : Bubble__arr.arr) 

end

(* Module for axiomatizing type "T18s" defined at bubble.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Bubble__bubbled__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8s" defined at bubble.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Bubble__bubbled__L7s__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t8s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t8s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8s__ref =
  { mutable t8s__content "model_trace:" "name:" : t8s }
 
 function t8s__ref___projection 
   (a : t8s__ref) : t8s =
  a.t8s__content
 
 meta "model_projection" function t8s__ref___projection
 
 meta "inline : no" function t8s__ref___projection
 
 val t8s__havoc 
   (x : t8s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24s" defined at bubble.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__L23s__T24s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t24s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t24s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24s__ref =
  { mutable t24s__content "model_trace:" "name:" : t24s }
 
 function t24s__ref___projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref___projection
 
 meta "inline : no" function t24s__ref___projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26s" defined at bubble.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__L23s__L25s__T26s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t26s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t26s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26s__ref =
  { mutable t26s__content "model_trace:" "name:" : t26s }
 
 function t26s__ref___projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref___projection
 
 meta "inline : no" function t26s__ref___projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at bubble.adb:2, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at bubble.adb:2, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Bubble__sort__TS1bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Bubble__sort__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at bubble.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__outer__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at bubble.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__inner__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at bubble.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__inner__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at bubble.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__inner__L8b__L10b__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at bubble.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__inner__L4b__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at bubble.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__inner__L4b__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T17b" defined at bubble.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__outer__L16b__T17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t17b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t17b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17b__ref =
  { mutable t17b__content "model_trace:" "name:" : t17b }
 
 function t17b__ref___projection 
   (a : t17b__ref) : t17b =
  a.t17b__content
 
 meta "model_projection" function t17b__ref___projection
 
 meta "inline : no" function t17b__ref___projection
 
 val t17b__havoc 
   (x : t17b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at bubble.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__outer__L16b__L18b__T19b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t19b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t19b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t19b__ref =
  { mutable t19b__content "model_trace:" "name:" : t19b }
 
 function t19b__ref___projection 
   (a : t19b__ref) : t19b =
  a.t19b__content
 
 meta "model_projection" function t19b__ref___projection
 
 meta "inline : no" function t19b__ref___projection
 
 val t19b__havoc 
   (x : t19b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at bubble.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__outer__L12b__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t13b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t13b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13b__ref =
  { mutable t13b__content "model_trace:" "name:" : t13b }
 
 function t13b__ref___projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref___projection
 
 meta "inline : no" function t13b__ref___projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at bubble.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Bubble__sort__outer__L12b__L14b__T15b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t15b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t15b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t15b__ref =
  { mutable t15b__content "model_trace:" "name:" : t15b }
 
 function t15b__ref___projection 
   (a : t15b__ref) : t15b =
  a.t15b__content
 
 meta "model_projection" function t15b__ref___projection
 
 meta "inline : no" function t15b__ref___projection
 
 val t15b__havoc 
   (x : t15b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "a" defined at bubble.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Bubble__sort__a
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val a #"bubble.ads" 16 0 0#"model_projected" "name:A" "model_trace:2718"  : Array__Int__Standard__integer.map__ref 
 
 function a__first #"bubble.ads" 16 0 0#"model_projected" "name:A" "model_trace:2718'First" 
   : Standard__integer.integer
 
 function a__last #"bubble.ads" 16 0 0#"model_projected" "name:A" "model_trace:2718'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at bubble.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "temp" defined at bubble.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Bubble__sort__temp
 use import "_gnatprove_standard".Main

 val temp #"bubble.adb" 4 0 0#"model_projected" "model_trace:2325" "name:Temp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "temp" defined at bubble.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__temp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at bubble.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Bubble__sort__outer__i
 use import "_gnatprove_standard".Main

 val i #"bubble.adb" 6 0 0#"model_projected" "model_trace:2338" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at bubble.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__outer__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at bubble.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Bubble__sort__inner__j
 use import "_gnatprove_standard".Main

 val j #"bubble.adb" 7 0 0#"model_projected" "model_trace:2359" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at bubble.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__inner__j___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "sort" defined at bubble.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Bubble__sort
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "outer" defined at bubble.adb:6, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Bubble__sort__outer
 use import "_gnatprove_standard".Main

 exception Outer

end

(* Module giving an empty axiom for the entity "outer" defined at bubble.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__outer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "inner" defined at bubble.adb:7, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Bubble__sort__inner
 use import "_gnatprove_standard".Main

 exception Inner

end

(* Module giving an empty axiom for the entity "inner" defined at bubble.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Bubble__sort__inner___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "arr" defined at bubble.ads:2, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__arr___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Bubble__arr

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : Bubble__arr.arr) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (temp___skip_constant_156) then (
   true) else (
   (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Bubble__arr.first temp___expr_159) (Bubble__arr.last temp___expr_159))))

end

(* Module giving axioms for type "T20s" defined at bubble.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sorted__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15s" defined at bubble.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sorted__L14s__T15s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at bubble.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sorted__L3s__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22s" defined at bubble.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__bubbled__L21s__T22s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at bubble.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__bubbled__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at bubble.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__bubbled__L7s__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24s" defined at bubble.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__L23s__T24s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26s" defined at bubble.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__L23s__L25s__T26s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at bubble.adb:2, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at bubble.adb:2, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Bubble__sort__a
 use        Bubble__sort__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : Bubble__sort__S1b.s1b) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (temp___skip_constant_170) then (
   true) else (
   ( (Bubble__sort__S1b.dynamic_property (Standard__integer__rep.to_rep Bubble__sort__a.a__first) (Standard__integer__rep.to_rep Bubble__sort__a.a__last) (Bubble__sort__S1b.first temp___expr_173) (Bubble__sort__S1b.last temp___expr_173)) /\ ( ((Bubble__sort__S1b.first temp___expr_173) = (Standard__integer__rep.to_rep Bubble__sort__a.a__first)) /\ ((Bubble__sort__S1b.last temp___expr_173) = (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_175 : Bubble__sort__S1b.s1b) (temp___skip_top_level_176 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at bubble.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__outer__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at bubble.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__inner__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at bubble.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__inner__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at bubble.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__inner__L8b__L10b__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at bubble.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__inner__L4b__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at bubble.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__inner__L4b__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T17b" defined at bubble.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__outer__L16b__T17b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19b" defined at bubble.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__outer__L16b__L18b__T19b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at bubble.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__outer__L12b__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15b" defined at bubble.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Bubble__sort__outer__L12b__L14b__T15b___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving a program function and a defining axiom for the expression function "sorted" defined at bubble.ads:4, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Bubble__sorted___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Bubble__sorted
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Bubble__arr___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val sorted 
   (a : Bubble__arr.arr) : bool
  requires {  ((Bubble__arr.last a) > ( -2147483648 )) }
  ensures {  ( ( (result = (Bubble__sorted.sorted a)) /\ (Bubble__sorted.sorted__function_guard result a) ) /\ ( ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2549"  : int.
   ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (i + 1)))) )) ) /\ ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2594"  : int.
   ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (i + 1)))) )) ) ) ) }
 
 axiom sorted__post_axiom :
  (forall a   : Bubble__arr.arr [(Bubble__sorted.sorted a)].
   ( ( (Bubble__arr___axiom.dynamic_invariant a True True True True) /\ ((Bubble__arr.last a) > ( -2147483648 )) ) -> (let result = (Bubble__sorted.sorted a) in (
    (if ((Bubble__sorted.sorted__function_guard result a)) then (
     ( ( ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2594"  : int.
      ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (i + 1)))) )) ) /\ true ) /\ true )) else true)))
    ))
 
 axiom sorted__def_axiom :
  (forall a   : Bubble__arr.arr [(Bubble__sorted.sorted a)].
   ( (let result = (Bubble__sorted.sorted a) in (
    (Bubble__sorted.sorted__function_guard result a)))
    -> ( ((Bubble__sorted.sorted a) = True) <-> (forall i   "model" "name:I" "model_trace:2549"  : int.
    ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (i + 1)))) )) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "bubbled" defined at bubble.ads:10, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Bubble__bubbled___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Bubble__bubbled
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Bubble__arr___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val bubbled 
   (a : Bubble__arr.arr) : bool
  requires {  ((Bubble__arr.last a) > ( -2147483648 )) }
  ensures {  ( ( (result = (Bubble__bubbled.bubbled a)) /\ (Bubble__bubbled.bubbled__function_guard result a) ) /\ ( ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2640"  : int.
   ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (Bubble__arr.last a)))) )) ) /\ ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2685"  : int.
   ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (Bubble__arr.last a)))) )) ) ) ) }
 
 axiom bubbled__post_axiom :
  (forall a   : Bubble__arr.arr [(Bubble__bubbled.bubbled a)].
   ( ( (Bubble__arr___axiom.dynamic_invariant a True True True True) /\ ((Bubble__arr.last a) > ( -2147483648 )) ) -> (let result = (Bubble__bubbled.bubbled a) in (
    (if ((Bubble__bubbled.bubbled__function_guard result a)) then (
     ( ( ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2685"  : int.
      ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (Bubble__arr.last a)))) )) ) /\ true ) /\ true )) else true)))
    ))
 
 axiom bubbled__def_axiom :
  (forall a   : Bubble__arr.arr [(Bubble__bubbled.bubbled a)].
   ( (let result = (Bubble__bubbled.bubbled a) in (
    (Bubble__bubbled.bubbled__function_guard result a)))
    -> ( ((Bubble__bubbled.bubbled a) = True) <-> (forall i   "model" "name:I" "model_trace:2640"  : int.
    ( ( ((Bubble__arr.first a) <= i) /\ (i <= ((Bubble__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array a) (Bubble__arr.last a)))) )) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "sort" defined at bubble.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Bubble__sort___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Array__Int__Standard__integer

 val sort 
   (a : Array__Int__Standard__integer.map__ref) (a__first : Standard__integer.integer) (a__last : Standard__integer.integer) : unit
  requires {  ( ((Standard__integer__rep.to_rep a__last) > ( -2147483648 )) /\ ((Standard__integer__rep.to_rep a__last) < 2147483647) ) }
  ensures {  ( (forall i   "model" "name:I" "model_trace:2752"  : int.
   ( ( ((Standard__integer__rep.to_rep a__first) <= i) /\ (i <= (Standard__integer__rep.to_rep a__last)) ) -> (exists j  : int.
    ( ( ((Standard__integer__rep.to_rep a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get a.Array__Int__Standard__integer.map__content i)) = (Standard__integer__rep.to_rep (let temp___165 = (old a.Array__Int__Standard__integer.map__content ) in (
     (Array__Int__Standard__integer.get temp___165 j)))
    )) )) )) /\ (if (True) then (
   true) else (
   (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Standard__integer__rep.to_rep a__first) (Standard__integer__rep.to_rep a__last)))) ) }
  writes {a}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "bubble" defined at bubble.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Bubble__package_def
 use import "_gnatprove_standard".Main

 let def #"bubble.ads" 1 0 0#"GP_Subp:bubble.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"bubble.ads" 1 0 0# true }
  ensures { #"bubble.ads" 1 0 0# true }
   =
  ( (#"bubble.ads" 1 0 0# ());
  (#"bubble.ads" 2 0 0# ());
  (#"bubble.ads" 4 0 0# ());
  (#"bubble.ads" 8 0 0# ());
  (#"bubble.ads" 7 0 0# ());
  (#"bubble.ads" 6 0 0# ());
  (#"bubble.ads" 10 0 0# ());
  (#"bubble.ads" 14 0 0# ());
  (#"bubble.ads" 13 0 0# ());
  (#"bubble.ads" 12 0 0# ());
  (#"bubble.ads" 16 0 0# ());
  (#"bubble.ads" 18 0 0# ());
  (#"bubble.ads" 17 0 0# ());
  (#"bubble.ads" 17 0 0# ());
  (#"bubble.ads" 17 0 0# ());
  (#"bubble.ads" 17 0 0# ());
  (#"bubble.ads" 17 0 0# ());
  (#"bubble.ads" 4 0 0# ());
  (#"bubble.ads" 10 0 0# ());
  (#"bubble.adb" 1 0 0# ());
  (#"bubble.adb" 2 0 0# ());
  ( "GP_Sloc:bubble.adb:28:1" (#"bubble.adb" 28 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sorted" defined at bubble.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Bubble__sorted__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Bubble__arr___axiom
 use        Bubble__sorted__a
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Bubble__arr___axiom
 use        Bubble__sorted__a___axiom

 val bubble__sorted__result "model_projected" "model_trace:2529@result" "name:Sorted"  : bool__ref 
 
 let def #"bubble.ads" 4 0 0#"W:diverges:N" "GP_Subp:bubble.ads:4" 
   (__void_param : unit)
  requires { #"bubble.ads" 4 0 0# true }
  ensures { #"bubble.ads" 4 0 0# (#"bubble.ads" 8 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:bubble.ads:8:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:8" "comment:     Post => Sorted'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1));
             ^ bubble.ads:8:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:2871" "GP_Sloc:bubble.ads:8:14" ( (bubble__sorted__result.bool__content = True) <-> (forall i #"bubble.ads" 8 0 0#  "model" "name:I" "model_trace:2594"  : int.
   ( ( ((Bubble__arr.first Bubble__sorted__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__sorted__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) (i + 1)))) )) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram bubble.ads:4 *)
  ;
   assume {  (Bubble__arr___axiom.dynamic_invariant Bubble__sorted__a.a True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram bubble.ads:4 *)
  ;
  () (* Check for RTE in the Pre of the subprogram bubble.ads:4 *)
  ;
   abstract ensures {true}(let _ = ((  abstract ensures {true}(let _ = Bubble__sorted__a.a in (
   ()))
   end ;
  (Bubble__arr.last(Bubble__sorted__a.a)) ) > ( -2147483648 )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram bubble.ads:4 *)
  ;
   assume {  ((Bubble__arr.last Bubble__sorted__a.a) > ( -2147483648 )) };
   try
   ( ( "GP_Sloc:bubble.ads:5:8" (#"bubble.ads" 5 0 0# ( #"bubble.ads" 5 0 0# bubble__sorted__result.bool__content <- ( ( (let i = #"bubble.ads" 5 0 0# (any int
   ) in (
    (if ((Boolean.andb((( #"bubble.ads" 5 0 0# abstract ensures {true}(let _ = Bubble__sorted__a.a in (
     ()))
     end ;
    (Bubble__arr.first(Bubble__sorted__a.a)) ) <= i)) ((i <= (#"bubble.ads" 5 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:bubble.ads:5:39" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1)) with
                                      ^ bubble.ads:5:39:VC_OVERFLOW_CHECK" "GP_Shape:return__forall__range__sub" (Standard__integer.range_check_((( #"bubble.ads" 5 0 0# abstract ensures {true}(let _ = Bubble__sorted__a.a in (
     ()))
     end ;
    (Bubble__arr.last(Bubble__sorted__a.a)) ) - 1))) )))))) then (
      abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__sorted__a.a))) ((  assert {  (#"bubble.ads" 5 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:bubble.ads:5:48" "GP_Reason:VC_INDEX_CHECK" "GP_Id:1" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1)) with
                                               ^ bubble.ads:5:48:VC_INDEX_CHECK" "GP_Shape:return__forall__cmp__ixdcomp" ( ((Bubble__arr.first Bubble__sorted__a.a) <= i) /\ (i <= (Bubble__arr.last Bubble__sorted__a.a)) ) )) };
     i ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__sorted__a.a))) ((let temp___179 = (#"bubble.ads" 5 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.ads:5:58" "GP_Id:2" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1)) with
                                                         ^ bubble.ads:5:58:VC_OVERFLOW_CHECK" "GP_Shape:return__forall__cmp__ixdcomp__add" (Standard__integer.range_check_((i + 1))) )) in (
      (  assert {  (#"bubble.ads" 5 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:5:58" "GP_Shape:return__forall__cmp__ixdcomp__add" "GP_Id:3" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1)) with
                                                         ^ bubble.ads:5:58:VC_INDEX_CHECK" ( ((Bubble__arr.first Bubble__sorted__a.a) <= temp___179) /\ (temp___179 <= (Bubble__arr.last Bubble__sorted__a.a)) ) )) };
      temp___179 )))
     ))))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2549"  : int.
    ( ( ((Bubble__arr.first Bubble__sorted__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__sorted__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) (i + 1)))) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Boolean.to_int(bubble__sorted__result.bool__content)) = (Boolean.to_int(( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Bubble__sorted__a.a in (
    ()))
    end ;
   (Bubble__arr.first(Bubble__sorted__a.a)) ) <= i)) ((i <= (#"bubble.ads" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.ads:8:62" "GP_Id:4" "comment:     Post => Sorted'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1));
                                                             ^ bubble.ads:8:62:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__forall__range__sub" (Standard__integer.range_check_((( #"bubble.ads" 8 0 0# abstract ensures {true}(let _ = Bubble__sorted__a.a in (
    ()))
    end ;
   (Bubble__arr.last(Bubble__sorted__a.a)) ) - 1))) )))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__sorted__a.a))) ((  assert {  (#"bubble.ads" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:8:71" "GP_Id:5" "comment:     Post => Sorted'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1));
                                                                      ^ bubble.ads:8:71:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp" ( ((Bubble__arr.first Bubble__sorted__a.a) <= i) /\ (i <= (Bubble__arr.last Bubble__sorted__a.a)) ) )) };
    i ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__sorted__a.a))) ((let temp___180 = (#"bubble.ads" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.ads:8:81" "GP_Id:6" "comment:     Post => Sorted'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1));
                                                                                ^ bubble.ads:8:81:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp__add" (Standard__integer.range_check_((i + 1))) )) in (
     (  assert {  (#"bubble.ads" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:8:81" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp__add" "GP_Id:7" "comment:     Post => Sorted'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1));
                                                                                ^ bubble.ads:8:81:VC_INDEX_CHECK" ( ((Bubble__arr.first Bubble__sorted__a.a) <= temp___180) /\ (temp___180 <= (Bubble__arr.last Bubble__sorted__a.a)) ) )) };
     temp___180 )))
    ))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2594"  : int.
   ( ( ((Bubble__arr.first Bubble__sorted__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__sorted__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__sorted__a.a) (i + 1)))) )) )} 
  ) )))) in (
   ()))
   end ;
  bubble__sorted__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "bubbled" defined at bubble.ads:10, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Bubble__bubbled__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Bubble__arr___axiom
 use        Bubble__bubbled__a
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Bubble__arr___axiom
 use        Bubble__bubbled__a___axiom

 val bubble__bubbled__result "model_projected" "model_trace:2620@result" "name:Bubbled"  : bool__ref 
 
 let def #"bubble.ads" 10 0 0#"W:diverges:N" "GP_Subp:bubble.ads:10" 
   (__void_param : unit)
  requires { #"bubble.ads" 10 0 0# true }
  ensures { #"bubble.ads" 10 0 0# (#"bubble.ads" 14 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:bubble.ads:14:14" "GP_Id:15" "comment:     Post => Bubbled'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last));
             ^ bubble.ads:14:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3013" "GP_Sloc:bubble.ads:14:14" ( (bubble__bubbled__result.bool__content = True) <-> (forall i #"bubble.ads" 14 0 0#  "model" "name:I" "model_trace:2685"  : int.
   ( ( ((Bubble__arr.first Bubble__bubbled__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__bubbled__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) (Bubble__arr.last Bubble__bubbled__a.a)))) )) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram bubble.ads:10 *)
  ;
   assume {  (Bubble__arr___axiom.dynamic_invariant Bubble__bubbled__a.a True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram bubble.ads:10 *)
  ;
  () (* Check for RTE in the Pre of the subprogram bubble.ads:10 *)
  ;
   abstract ensures {true}(let _ = ((  abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
   ()))
   end ;
  (Bubble__arr.last(Bubble__bubbled__a.a)) ) > ( -2147483648 )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram bubble.ads:10 *)
  ;
   assume {  ((Bubble__arr.last Bubble__bubbled__a.a) > ( -2147483648 )) };
   try
   ( ( "GP_Sloc:bubble.ads:11:8" (#"bubble.ads" 11 0 0# ( #"bubble.ads" 11 0 0# bubble__bubbled__result.bool__content <- ( ( (let i = #"bubble.ads" 11 0 0# (any int
   ) in (
    (if ((Boolean.andb((( #"bubble.ads" 11 0 0# abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
     ()))
     end ;
    (Bubble__arr.first(Bubble__bubbled__a.a)) ) <= i)) ((i <= (#"bubble.ads" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:return__forall__range__sub" "GP_Sloc:bubble.ads:11:39" "GP_Id:9" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last)) with
                                      ^ bubble.ads:11:39:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((( #"bubble.ads" 11 0 0# abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
     ()))
     end ;
    (Bubble__arr.last(Bubble__bubbled__a.a)) ) - 1))) )))))) then (
      abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__bubbled__a.a))) ((  assert {  (#"bubble.ads" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:return__forall__cmp__ixdcomp" "GP_Sloc:bubble.ads:11:48" "GP_Id:10" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last)) with
                                               ^ bubble.ads:11:48:VC_INDEX_CHECK" ( ((Bubble__arr.first Bubble__bubbled__a.a) <= i) /\ (i <= (Bubble__arr.last Bubble__bubbled__a.a)) ) )) };
     i ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__bubbled__a.a))) ((let temp___182 = (  abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
      ()))
      end ;
     (Bubble__arr.last(Bubble__bubbled__a.a)) ) in (
      (  assert {  (#"bubble.ads" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:11:57" "GP_Id:11" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last)) with
                                                        ^ bubble.ads:11:57:VC_INDEX_CHECK" "GP_Shape:return__forall__cmp__ixdcomp__last_ref" ( ((Bubble__arr.first Bubble__bubbled__a.a) <= temp___182) /\ (temp___182 <= (Bubble__arr.last Bubble__bubbled__a.a)) ) )) };
      temp___182 )))
     ))))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2640"  : int.
    ( ( ((Bubble__arr.first Bubble__bubbled__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__bubbled__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) (Bubble__arr.last Bubble__bubbled__a.a)))) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Boolean.to_int(bubble__bubbled__result.bool__content)) = (Boolean.to_int(( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
    ()))
    end ;
   (Bubble__arr.first(Bubble__bubbled__a.a)) ) <= i)) ((i <= (#"bubble.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__forall__range__sub" "GP_Sloc:bubble.ads:14:63" "GP_Id:12" "comment:     Post => Bubbled'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last));
                                                              ^ bubble.ads:14:63:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((( #"bubble.ads" 14 0 0# abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
    ()))
    end ;
   (Bubble__arr.last(Bubble__bubbled__a.a)) ) - 1))) )))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__bubbled__a.a))) ((  assert {  (#"bubble.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp" "GP_Sloc:bubble.ads:14:72" "GP_Id:13" "comment:     Post => Bubbled'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last));
                                                                       ^ bubble.ads:14:72:VC_INDEX_CHECK" ( ((Bubble__arr.first Bubble__bubbled__a.a) <= i) /\ (i <= (Bubble__arr.last Bubble__bubbled__a.a)) ) )) };
    i ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Bubble__arr.to_array(Bubble__bubbled__a.a))) ((let temp___183 = (  abstract ensures {true}(let _ = Bubble__bubbled__a.a in (
     ()))
     end ;
    (Bubble__arr.last(Bubble__bubbled__a.a)) ) in (
     (  assert {  (#"bubble.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:14:81" "GP_Id:14" "comment:     Post => Bubbled'Result = (for all I in A'First .. A'Last - 1 => A(I) <= A(A'Last));
                                                                                ^ bubble.ads:14:81:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__forall__cmp__ixdcomp__last_ref" ( ((Bubble__arr.first Bubble__bubbled__a.a) <= temp___183) /\ (temp___183 <= (Bubble__arr.last Bubble__bubbled__a.a)) ) )) };
     temp___183 )))
    ))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2685"  : int.
   ( ( ((Bubble__arr.first Bubble__bubbled__a.a) <= i) /\ (i <= ((Bubble__arr.last Bubble__bubbled__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Bubble__arr.to_array Bubble__bubbled__a.a) (Bubble__arr.last Bubble__bubbled__a.a)))) )) )} 
  ) )))) in (
   ()))
   end ;
  bubble__bubbled__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sort" defined at bubble.ads:16, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Bubble__sort__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Bubble__arr
 use        Array__Int__Standard__integer
 use        Bubble__sort__a
 use        Bubble__sort__temp
 use        Bubble__sort__outer
 use        Bubble__sort__outer__T2b
 use        Bubble__sort__outer__i
 use        Bubble__sort__inner
 use        Bubble__sort__inner__T3b
 use        Bubble__sort__inner__j
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Bubble__sort__temp___axiom
 use        Bubble__sort__outer__i___axiom
 use        Bubble__sort__inner__j___axiom
 use        Bubble__sort__inner___axiom
 use        Bubble__sort__outer___axiom
 use        Bubble__arr___axiom
 use        Bubble__sort__a___axiom
 use        Bubble__sort__outer__T2b___axiom
 use        Bubble__sort__inner__T3b___axiom

 let def #"bubble.ads" 16 0 0#"W:diverges:N" "GP_Subp:bubble.ads:16" 
   (__void_param : unit)
  requires { #"bubble.ads" 16 0 0# true }
  ensures { #"bubble.ads" 16 0 0# (#"bubble.ads" 18 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:bubble.ads:18:14" "GP_Id:34" "comment:     Post => (for all I in A'Range => (for some J in A'Range => A(I) = A'Old(J)));
             ^ bubble.ads:18:14:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall i #"bubble.ads" 18 0 0#  "model" "name:I" "model_trace:2752"  : int.
   ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists j  : int.
    ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ( "GP_Pretty_Ada:2777" "GP_Sloc:bubble.ads:18:65" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content i)) = (Standard__integer__rep.to_rep (let temp___208 = (old Bubble__sort__a.a.Array__Int__Standard__integer.map__content ) in (
     (Array__Int__Standard__integer.get temp___208 j)))
    )) ) )) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram bubble.ads:16 *)
  ;
   assume {  (if (False) then (
   true) else (
   (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Standard__integer__rep.to_rep Bubble__sort__a.a__first) (Standard__integer__rep.to_rep Bubble__sort__a.a__last)))) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram bubble.ads:16 *)
  ;
  () (* Check for RTE in the Pre of the subprogram bubble.ads:16 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Bubble__sort__a.a__last ))) > ( -2147483648 ))) (((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Bubble__sort__a.a__last ))) < 2147483647))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram bubble.ads:16 *)
  ;
   assume {  ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__last) > ( -2147483648 )) /\ ((Standard__integer__rep.to_rep Bubble__sort__a.a__last) < 2147483647) ) };
   abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  (let temp___old_205 =  (any Array__Int__Standard__integer.map
  ensures { (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
  ) in (
   (  try
    ( (#"bubble.adb" 2 0 0# ());
    (#"bubble.adb" 4 0 0# ( #"bubble.adb" 4 0 0# abstract ensures {true}(let _ = () in (
     ()))
     end ;
    #"bubble.adb" 4 0 0# assume { #"bubble.adb" 4 0 0# (Standard__integer___axiom.default_initial_assumption Bubble__sort__temp.temp.int__content False) };
    #"bubble.adb" 4 0 0# assume { #"bubble.adb" 4 0 0# (Standard__integer___axiom.dynamic_invariant Bubble__sort__temp.temp.int__content False False True True) } ));
    (#"bubble.adb" 7 0 0# ());
    (#"bubble.adb" 6 0 0# ());
    ( "GP_Sloc:bubble.adb:6:55" (#"bubble.adb" 6 0 0# (let temp___185 = (Standard__integer__rep.to_rep(( #"bubble.adb" 6 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Bubble__sort__a.a__first ))) in (
    (let temp___186 = (#"bubble.adb" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:6:51" "GP_Id:31" "comment:       Outer : for I in reverse A'First .. A'Last - 1 loop
                                                  ^ bubble.adb:6:51:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__range__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"bubble.adb" 6 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Bubble__sort__a.a__last ))) - 1))) )) in (
     (  Bubble__sort__outer__i.i.int__content <- ( temp___186 );
     () (* Translation of an Ada loop from bubble.adb:6 *)
     ;
     (if ((Boolean.andb((temp___185 <= Bubble__sort__outer__i.i.int__content)) ((Bubble__sort__outer__i.i.int__content <= temp___186)))) then (
       try
       (  abstract ensures {true}(let _ = Bubble__sort__temp.temp.int__content in (
        ()))
        end ;
       (let temp___202 =  (any int
       ensures { (result = Bubble__sort__temp.temp.int__content)} 
       ) in (
        (  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
         ()))
         end ;
        (let temp___203 =  (any Array__Int__Standard__integer.map
        ensures { (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
        ) in (
         (  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
          ()))
          end ;
         (let temp___200 =  (any Array__Int__Standard__integer.map
         ensures { (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
         ) in (
          (  abstract ensures {true}(let _ = Bubble__sort__outer__i.i.int__content in (
           ()))
           end ;
          (let temp___198 =  (any int
          ensures { (result = Bubble__sort__outer__i.i.int__content)} 
          ) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop bubble.adb:6 *)
           ;
           ( "GP_Sloc:bubble.adb:7:40" (#"bubble.adb" 7 0 0# (let temp___187 = (Standard__integer__rep.to_rep(( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
            ()))
            end ;
           Bubble__sort__a.a__first ))) in (
           (let temp___188 = Bubble__sort__outer__i.i.int__content in (
            ( #"bubble.adb" 7 0 0# Bubble__sort__inner__j.j.int__content <- ( temp___187 );
            () (* Translation of an Ada loop from bubble.adb:7 *)
            ;
            (if ((Boolean.andb((temp___187 <= Bubble__sort__inner__j.j.int__content)) ((Bubble__sort__inner__j.j.int__content <= temp___188)))) then (
             #"bubble.adb" 7 0 0# try
              ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
               ()))
               end ;
              (let temp___197 = #"bubble.adb" 7 0 0# (any Array__Int__Standard__integer.map
              ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
              ) in (
               ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__temp.temp.int__content in (
                ()))
                end ;
               (let temp___196 = #"bubble.adb" 7 0 0# (any int
               ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__temp.temp.int__content)} 
               ) in (
                ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__inner__j.j.int__content in (
                 ()))
                 end ;
                (let temp___195 = #"bubble.adb" 7 0 0# (any int
                ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__inner__j.j.int__content)} 
                ) in (
                 ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                  ()))
                  end ;
                 (let temp___193 = #"bubble.adb" 7 0 0# (any Array__Int__Standard__integer.map
                 ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
                 ) in (
                  ( () (* First unroling of the loop statements appearing before the loop invariant of loop bubble.adb:7 *)
                  ;
                  ( "GP_Sloc:bubble.adb:8:13" (#"bubble.adb" 8 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 8 0 0# assert { #"bubble.adb" 8 0 0# (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:19" "GP_Id:22" "comment:            if A (J) > A(J + 1) then
                  ^ bubble.adb:8:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                  Bubble__sort__inner__j.j.int__content ))))) > (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___191 = (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Id:23" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                   (  assert {  (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" "GP_Id:24" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___191) /\ (temp___191 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                   temp___191 )))
                  )))))) then (
                   ( ( "GP_Sloc:bubble.adb:9:16" (#"bubble.adb" 9 0 0# ()) );
                   ( "GP_Sloc:bubble.adb:9:22" (#"bubble.adb" 9 0 0# #"bubble.adb" 9 0 0# Bubble__sort__temp.temp.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 9 0 0# assert { #"bubble.adb" 9 0 0# (#"bubble.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:9:28" "GP_Id:16" "comment:               Temp  := A (J);
                           ^ bubble.adb:9:28:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__temp_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                   Bubble__sort__inner__j.j.int__content ))))) )) );
                   ( "GP_Sloc:bubble.adb:10:22" (#"bubble.adb" 10 0 0# #"bubble.adb" 10 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 10 0 0# assert { #"bubble.adb" 10 0 0# (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:19" "GP_Id:19" "comment:               A (J) := A (J + 1);
                  ^ bubble.adb:10:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                   Bubble__sort__inner__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___189 = (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Id:17" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                    (  assert {  (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Id:18" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___189) /\ (temp___189 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    temp___189 )))
                   )))))))) )) );
                   ( "GP_Sloc:bubble.adb:11:29" (#"bubble.adb" 11 0 0# ()) );
                   ( "GP_Sloc:bubble.adb:11:26" (#"bubble.adb" 11 0 0# #"bubble.adb" 11 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___190 = (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:20" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                    (  assert {  (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:21" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___190) /\ (temp___190 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    temp___190 )))
                   ) ((Standard__integer__rep.of_rep(Bubble__sort__temp.temp.int__content)))) )) ) )) else (
                   ()))) );
                  () (* While loop translating the Ada loop from bubble.adb:7 *)
                  ;
                   while True do
                   invariant { 
                    (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:bubble.adb:17:36" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:27" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                   ^ bubble.adb:17:36:VC_LOOP_INVARIANT" "GP_Shape:outer_while__inner_while__pragargs__forall" (forall k1 #"bubble.adb" 17 0 0#  "model" "model_trace:2408" "name:K1"  : int.
                     ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
                      ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ( "GP_Pretty_Ada:2433" "GP_Sloc:bubble.adb:17:88" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) ) )) )) ))
                    }
                   ( () (* Assume implicit invariants from the loop bubble.adb:7 *)
                   ;
                    assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (True) then (
                    true) else (
                    (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Standard__integer__rep.to_rep Bubble__sort__a.a__first) (Standard__integer__rep.to_rep Bubble__sort__a.a__last)))) ) /\ (forall temp___194   : int.
                    (if (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___194) /\ (temp___194 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) )) then (
                     (if (( false /\ ( (temp___188 < temp___194) \/ ( (temp___194 < temp___187) \/ (Bubble__sort__inner__j.j.int__content < temp___194) ) ) )) then (
                      ((Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content temp___194) = (Array__Int__Standard__integer.get temp___193 temp___194))) else (
                      true))) else true)) ) /\ (if (((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__outer__i.i.int__content)) then (
                    (Bubble__sort__inner__T3b.dynamic_property (Standard__integer__rep.to_rep Bubble__sort__a.a__first) Bubble__sort__outer__i.i.int__content Bubble__sort__inner__j.j.int__content)) else true) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Bubble__sort__temp.temp.int__content False True True True) ) /\ true )) (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= Bubble__sort__outer__i.i.int__content) ))) };
                   () (* Check for absence of RTE in the invariant of loop bubble.adb:7 *)
                   ;
                    abstract ensures {true}(let _ = ( (let k1 =  (any int
                   ) in (
                    (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                     ()))
                     end ;
                    Bubble__sort__a.a__first ))) <= k1)) ((k1 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                     ()))
                     end ;
                    Bubble__sort__a.a__last ))))))) then (
                      abstract ensures {true}(let _ = ( (let k2 =  (any int
                     ) in (
                      (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                       ()))
                       end ;
                      Bubble__sort__a.a__first ))) <= k2)) ((k2 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                       ()))
                       end ;
                      Bubble__sort__a.a__last ))))))) then (
                        abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:17:90" "GP_Id:25" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                                                                         ^ bubble.adb:17:90:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__pragargs__forall__forsome__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                       k1 ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___197) ((  assert {  (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__pragargs__forall__forsome__cmp__ixdcomp" "GP_Sloc:bubble.adb:17:116" "GP_Id:26" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                                                                                                   ^ bubble.adb:17:116:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                       k2 )))))) in (
                        ()))
                        end ))))
                     ;
                      (any bool
                     requires { true} 
                     ensures { ( (result = True) <-> (exists k2  : int.
                      ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) )) )} 
                     ) ) in (
                      ()))
                      end ))))
                   ;
                    (any bool
                   requires { true} 
                   ensures { ( (result = True) <-> (forall k1   "model" "model_trace:2408" "name:K1"  : int.
                    ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
                     ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) )) )) )} 
                   ) ) in (
                    ()))
                    end ;
                   () (* Loop statements appearing after the loop invariant of loop bubble.adb:7 *)
                   ;
                   () (* Check for the exit condition and loop statements appearing before the loop invariant of loop bubble.adb:7 *)
                   ;
                   (if ((Bubble__sort__inner__j.j.int__content = temp___188)) then (
                     raise Bubble__sort__inner.Inner));
                    Bubble__sort__inner__j.j.int__content <- ( (Bubble__sort__inner__j.j.int__content + 1) );
                   ( "GP_Sloc:bubble.adb:8:13" (#"bubble.adb" 8 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 8 0 0# assert { #"bubble.adb" 8 0 0# (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:19" "GP_Id:22" "comment:            if A (J) > A(J + 1) then
                  ^ bubble.adb:8:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                   Bubble__sort__inner__j.j.int__content ))))) > (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___191 = (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Id:23" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                    (  assert {  (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" "GP_Id:24" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___191) /\ (temp___191 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    temp___191 )))
                   )))))) then (
                    ( ( "GP_Sloc:bubble.adb:9:16" (#"bubble.adb" 9 0 0# ()) );
                    ( "GP_Sloc:bubble.adb:9:22" (#"bubble.adb" 9 0 0# #"bubble.adb" 9 0 0# Bubble__sort__temp.temp.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 9 0 0# assert { #"bubble.adb" 9 0 0# (#"bubble.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:9:28" "GP_Id:16" "comment:               Temp  := A (J);
                           ^ bubble.adb:9:28:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__temp_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    Bubble__sort__inner__j.j.int__content ))))) )) );
                    ( "GP_Sloc:bubble.adb:10:22" (#"bubble.adb" 10 0 0# #"bubble.adb" 10 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 10 0 0# assert { #"bubble.adb" 10 0 0# (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:19" "GP_Id:19" "comment:               A (J) := A (J + 1);
                  ^ bubble.adb:10:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    Bubble__sort__inner__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___189 = (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Id:17" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                     (  assert {  (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Id:18" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___189) /\ (temp___189 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     temp___189 )))
                    )))))))) )) );
                    ( "GP_Sloc:bubble.adb:11:29" (#"bubble.adb" 11 0 0# ()) );
                    ( "GP_Sloc:bubble.adb:11:26" (#"bubble.adb" 11 0 0# #"bubble.adb" 11 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___190 = (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:20" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                     (  assert {  (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:21" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___190) /\ (temp___190 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     temp___190 )))
                    ) ((Standard__integer__rep.of_rep(Bubble__sort__temp.temp.int__content)))) )) ) )) else (
                    ()))) ) )
                  done )))
                  )))
                 )))
                )))
               )
             with
              Bubble__sort__inner.Inner -> ()
             end)) )))
           ))
           ) );
           () (* While loop translating the Ada loop from bubble.adb:6 *)
           ;
            while True do
            invariant { 
             (#"bubble.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:bubble.adb:24:33" "GP_Id:30" "comment:         pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Outer)(K2)));
                                ^ bubble.adb:24:33:VC_LOOP_INVARIANT" "GP_Shape:outer_while__pragargs__forall" (forall k1 #"bubble.adb" 24 0 0#  "model" "name:K1" "model_trace:2445"  : int.
              ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
               ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ( "GP_Pretty_Ada:2470" "GP_Sloc:bubble.adb:24:85" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___203 k2))) ) )) )) ))
             }
            ( () (* Assume implicit invariants from the loop bubble.adb:6 *)
            ;
             assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= ((Standard__integer__rep.to_rep Bubble__sort__a.a__last) - 1))) then (
             (Bubble__sort__outer__T2b.dynamic_property (Standard__integer__rep.to_rep Bubble__sort__a.a__first) ((Standard__integer__rep.to_rep Bubble__sort__a.a__last) - 1) Bubble__sort__outer__i.i.int__content)) else true) ) /\ true ) /\ (if (True) then (
             true) else (
             (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Standard__integer__rep.to_rep Bubble__sort__a.a__first) (Standard__integer__rep.to_rep Bubble__sort__a.a__last)))) ) /\ (forall temp___201   : int.
             (if (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___201) /\ (temp___201 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) )) then (
              (if (( false /\ false )) then (
               ((Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content temp___201) = (Array__Int__Standard__integer.get temp___200 temp___201))) else (
               true))) else true)) ) /\ (Standard__integer___axiom.dynamic_invariant Bubble__sort__temp.temp.int__content False True True True) ) /\ true )) (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__outer__i.i.int__content) /\ (Bubble__sort__outer__i.i.int__content <= ((Standard__integer__rep.to_rep Bubble__sort__a.a__last) - 1)) ))) };
            () (* Check for absence of RTE in the invariant of loop bubble.adb:6 *)
            ;
             abstract ensures {true}(let _ = ( (let k1 =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
              ()))
              end ;
             Bubble__sort__a.a__first ))) <= k1)) ((k1 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
              ()))
              end ;
             Bubble__sort__a.a__last ))))))) then (
               abstract ensures {true}(let _ = ( (let k2 =  (any int
              ) in (
               (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                ()))
                end ;
               Bubble__sort__a.a__first ))) <= k2)) ((k2 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                ()))
                end ;
               Bubble__sort__a.a__last ))))))) then (
                 abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"bubble.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:24:87" "GP_Id:28" "comment:         pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Outer)(K2)));
                                                                                      ^ bubble.adb:24:87:VC_INDEX_CHECK" "GP_Shape:outer_while__pragargs__forall__forsome__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                k1 ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___203) ((  assert {  (#"bubble.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__pragargs__forall__forsome__cmp__ixdcomp" "GP_Sloc:bubble.adb:24:113" "GP_Id:29" "comment:         pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Outer)(K2)));
                                                                                                                ^ bubble.adb:24:113:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                k2 )))))) in (
                 ()))
                 end ))))
              ;
               (any bool
              requires { true} 
              ensures { ( (result = True) <-> (exists k2  : int.
               ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___203 k2))) )) )} 
              ) ) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k1   "model" "name:K1" "model_trace:2445"  : int.
             ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
              ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___203 k2))) )) )) )} 
            ) ) in (
             ()))
             end ;
            () (* Loop statements appearing after the loop invariant of loop bubble.adb:6 *)
            ;
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop bubble.adb:6 *)
            ;
            (if ((Bubble__sort__outer__i.i.int__content = temp___185)) then (
              raise Bubble__sort__outer.Outer));
             Bubble__sort__outer__i.i.int__content <- ( (Bubble__sort__outer__i.i.int__content - 1) );
            ( "GP_Sloc:bubble.adb:7:40" (#"bubble.adb" 7 0 0# (let temp___187 = (Standard__integer__rep.to_rep(( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
             ()))
             end ;
            Bubble__sort__a.a__first ))) in (
            (let temp___188 = Bubble__sort__outer__i.i.int__content in (
             ( #"bubble.adb" 7 0 0# Bubble__sort__inner__j.j.int__content <- ( temp___187 );
             () (* Translation of an Ada loop from bubble.adb:7 *)
             ;
             (if ((Boolean.andb((temp___187 <= Bubble__sort__inner__j.j.int__content)) ((Bubble__sort__inner__j.j.int__content <= temp___188)))) then (
              #"bubble.adb" 7 0 0# try
               ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                ()))
                end ;
               (let temp___197 = #"bubble.adb" 7 0 0# (any Array__Int__Standard__integer.map
               ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
               ) in (
                ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__temp.temp.int__content in (
                 ()))
                 end ;
                (let temp___196 = #"bubble.adb" 7 0 0# (any int
                ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__temp.temp.int__content)} 
                ) in (
                 ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__inner__j.j.int__content in (
                  ()))
                  end ;
                 (let temp___195 = #"bubble.adb" 7 0 0# (any int
                 ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__inner__j.j.int__content)} 
                 ) in (
                  ( #"bubble.adb" 7 0 0# abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                   ()))
                   end ;
                  (let temp___193 = #"bubble.adb" 7 0 0# (any Array__Int__Standard__integer.map
                  ensures {#"bubble.adb" 7 0 0# (result = Bubble__sort__a.a.Array__Int__Standard__integer.map__content)} 
                  ) in (
                   ( () (* First unroling of the loop statements appearing before the loop invariant of loop bubble.adb:7 *)
                   ;
                   ( "GP_Sloc:bubble.adb:8:13" (#"bubble.adb" 8 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 8 0 0# assert { #"bubble.adb" 8 0 0# (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:19" "GP_Id:22" "comment:            if A (J) > A(J + 1) then
                  ^ bubble.adb:8:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                   Bubble__sort__inner__j.j.int__content ))))) > (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___191 = (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Id:23" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                    (  assert {  (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" "GP_Id:24" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___191) /\ (temp___191 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    temp___191 )))
                   )))))) then (
                    ( ( "GP_Sloc:bubble.adb:9:16" (#"bubble.adb" 9 0 0# ()) );
                    ( "GP_Sloc:bubble.adb:9:22" (#"bubble.adb" 9 0 0# #"bubble.adb" 9 0 0# Bubble__sort__temp.temp.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 9 0 0# assert { #"bubble.adb" 9 0 0# (#"bubble.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:9:28" "GP_Id:16" "comment:               Temp  := A (J);
                           ^ bubble.adb:9:28:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__temp_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    Bubble__sort__inner__j.j.int__content ))))) )) );
                    ( "GP_Sloc:bubble.adb:10:22" (#"bubble.adb" 10 0 0# #"bubble.adb" 10 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 10 0 0# assert { #"bubble.adb" 10 0 0# (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:19" "GP_Id:19" "comment:               A (J) := A (J + 1);
                  ^ bubble.adb:10:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    Bubble__sort__inner__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___189 = (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Id:17" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                     (  assert {  (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Id:18" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___189) /\ (temp___189 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     temp___189 )))
                    )))))))) )) );
                    ( "GP_Sloc:bubble.adb:11:29" (#"bubble.adb" 11 0 0# ()) );
                    ( "GP_Sloc:bubble.adb:11:26" (#"bubble.adb" 11 0 0# #"bubble.adb" 11 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___190 = (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:20" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                     (  assert {  (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:21" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___190) /\ (temp___190 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     temp___190 )))
                    ) ((Standard__integer__rep.of_rep(Bubble__sort__temp.temp.int__content)))) )) ) )) else (
                    ()))) );
                   () (* While loop translating the Ada loop from bubble.adb:7 *)
                   ;
                    while True do
                    invariant { 
                     (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:bubble.adb:17:36" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:27" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                   ^ bubble.adb:17:36:VC_LOOP_INVARIANT" "GP_Shape:outer_while__inner_while__pragargs__forall" (forall k1 #"bubble.adb" 17 0 0#  "model" "model_trace:2408" "name:K1"  : int.
                      ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
                       ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ( "GP_Pretty_Ada:2433" "GP_Sloc:bubble.adb:17:88" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) ) )) )) ))
                     }
                    ( () (* Assume implicit invariants from the loop bubble.adb:7 *)
                    ;
                     assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (True) then (
                     true) else (
                     (Bubble__arr.dynamic_property Standard__integer.first Standard__integer.last (Standard__integer__rep.to_rep Bubble__sort__a.a__first) (Standard__integer__rep.to_rep Bubble__sort__a.a__last)))) ) /\ (forall temp___194   : int.
                     (if (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___194) /\ (temp___194 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) )) then (
                      (if (( false /\ ( (temp___188 < temp___194) \/ ( (temp___194 < temp___187) \/ (Bubble__sort__inner__j.j.int__content < temp___194) ) ) )) then (
                       ((Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content temp___194) = (Array__Int__Standard__integer.get temp___193 temp___194))) else (
                       true))) else true)) ) /\ (if (((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__outer__i.i.int__content)) then (
                     (Bubble__sort__inner__T3b.dynamic_property (Standard__integer__rep.to_rep Bubble__sort__a.a__first) Bubble__sort__outer__i.i.int__content Bubble__sort__inner__j.j.int__content)) else true) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Bubble__sort__temp.temp.int__content False True True True) ) /\ true )) (( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= Bubble__sort__outer__i.i.int__content) ))) };
                    () (* Check for absence of RTE in the invariant of loop bubble.adb:7 *)
                    ;
                     abstract ensures {true}(let _ = ( (let k1 =  (any int
                    ) in (
                     (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                      ()))
                      end ;
                     Bubble__sort__a.a__first ))) <= k1)) ((k1 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                      ()))
                      end ;
                     Bubble__sort__a.a__last ))))))) then (
                       abstract ensures {true}(let _ = ( (let k2 =  (any int
                      ) in (
                       (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                        ()))
                        end ;
                       Bubble__sort__a.a__first ))) <= k2)) ((k2 <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
                        ()))
                        end ;
                       Bubble__sort__a.a__last ))))))) then (
                         abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:17:90" "GP_Id:25" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                                                                         ^ bubble.adb:17:90:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__pragargs__forall__forsome__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                        k1 ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___197) ((  assert {  (#"bubble.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__pragargs__forall__forsome__cmp__ixdcomp" "GP_Sloc:bubble.adb:17:116" "GP_Id:26" "comment:            pragma Loop_Invariant (for all K1 in A'Range => (for some K2 in A'Range => A(K1) = A'Loop_Entry(Inner)(K2)));
                                                                                                                   ^ bubble.adb:17:116:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                        k2 )))))) in (
                         ()))
                         end ))))
                      ;
                       (any bool
                      requires { true} 
                      ensures { ( (result = True) <-> (exists k2  : int.
                       ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) )) )} 
                      ) ) in (
                       ()))
                       end ))))
                    ;
                     (any bool
                    requires { true} 
                    ensures { ( (result = True) <-> (forall k1   "model" "model_trace:2408" "name:K1"  : int.
                     ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k1) /\ (k1 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists k2  : int.
                      ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= k2) /\ (k2 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content k1)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___197 k2))) )) )) )} 
                    ) ) in (
                     ()))
                     end ;
                    () (* Loop statements appearing after the loop invariant of loop bubble.adb:7 *)
                    ;
                    () (* Check for the exit condition and loop statements appearing before the loop invariant of loop bubble.adb:7 *)
                    ;
                    (if ((Bubble__sort__inner__j.j.int__content = temp___188)) then (
                      raise Bubble__sort__inner.Inner));
                     Bubble__sort__inner__j.j.int__content <- ( (Bubble__sort__inner__j.j.int__content + 1) );
                    ( "GP_Sloc:bubble.adb:8:13" (#"bubble.adb" 8 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 8 0 0# assert { #"bubble.adb" 8 0 0# (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:19" "GP_Id:22" "comment:            if A (J) > A(J + 1) then
                  ^ bubble.adb:8:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                    Bubble__sort__inner__j.j.int__content ))))) > (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___191 = (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Id:23" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                     (  assert {  (#"bubble.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:8:28" "GP_Shape:outer_while__inner_while__if__cmp__ixdcomp__add" "GP_Id:24" "comment:            if A (J) > A(J + 1) then
                           ^ bubble.adb:8:28:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___191) /\ (temp___191 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     temp___191 )))
                    )))))) then (
                     ( ( "GP_Sloc:bubble.adb:9:16" (#"bubble.adb" 9 0 0# ()) );
                     ( "GP_Sloc:bubble.adb:9:22" (#"bubble.adb" 9 0 0# #"bubble.adb" 9 0 0# Bubble__sort__temp.temp.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 9 0 0# assert { #"bubble.adb" 9 0 0# (#"bubble.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:9:28" "GP_Id:16" "comment:               Temp  := A (J);
                           ^ bubble.adb:9:28:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__temp_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     Bubble__sort__inner__j.j.int__content ))))) )) );
                     ( "GP_Sloc:bubble.adb:10:22" (#"bubble.adb" 10 0 0# #"bubble.adb" 10 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) (( #"bubble.adb" 10 0 0# assert { #"bubble.adb" 10 0 0# (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:19" "GP_Id:19" "comment:               A (J) := A (J + 1);
                  ^ bubble.adb:10:19:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= Bubble__sort__inner__j.j.int__content) /\ (Bubble__sort__inner__j.j.int__content <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                     Bubble__sort__inner__j.j.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___189 = (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Id:17" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                      (  assert {  (#"bubble.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.adb:10:30" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Id:18" "comment:               A (J) := A (J + 1);
                             ^ bubble.adb:10:30:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___189) /\ (temp___189 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                      temp___189 )))
                     )))))))) )) );
                     ( "GP_Sloc:bubble.adb:11:29" (#"bubble.adb" 11 0 0# ()) );
                     ( "GP_Sloc:bubble.adb:11:26" (#"bubble.adb" 11 0 0# #"bubble.adb" 11 0 0# Bubble__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((let temp___190 = (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:20" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_OVERFLOW_CHECK" (Standard__integer.range_check_((Bubble__sort__inner__j.j.int__content + 1))) )) in (
                      (  assert {  (#"bubble.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:outer_while__inner_while__if__a_assign__ixdcomp__add" "GP_Sloc:bubble.adb:11:21" "GP_Id:21" "comment:               A (J + 1) := Temp;
                    ^ bubble.adb:11:21:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= temp___190) /\ (temp___190 <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
                      temp___190 )))
                     ) ((Standard__integer__rep.of_rep(Bubble__sort__temp.temp.int__content)))) )) ) )) else (
                     ()))) ) )
                   done )))
                   )))
                  )))
                 )))
                )
              with
               Bubble__sort__inner.Inner -> ()
              end)) )))
            ))
            ) ) )
           done )))
           )))
          )))
         )))
        )
      with
       Bubble__sort__outer.Outer -> ()
      end)) )))
    ))
    ) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Bubble__sort__a.a__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    Bubble__sort__a.a__last ))))))) then (
      abstract ensures {true}(let _ = ( (let j =  (any int
     ) in (
      (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
       ()))
       end ;
      Bubble__sort__a.a__first ))) <= j)) ((j <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Bubble__sort__a.a.Array__Int__Standard__integer.map__content in (
       ()))
       end ;
      Bubble__sort__a.a__last ))))))) then (
        abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Bubble__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"bubble.ads" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:bubble.ads:18:67" "GP_Id:32" "comment:     Post => (for all I in A'Range => (for some J in A'Range => A(I) = A'Old(J)));
                                                                  ^ bubble.ads:18:67:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__forsome__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
       i ))))) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___old_205) ((  assert {  (#"bubble.ads" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__forsome__cmp__ixdcomp" "GP_Sloc:bubble.ads:18:78" "GP_Id:33" "comment:     Post => (for all I in A'Range => (for some J in A'Range => A(I) = A'Old(J)));
                                                                             ^ bubble.ads:18:78:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) )) };
       j )))))) in (
        ()))
        end ))))
     ;
      (any bool
     requires { true} 
     ensures { ( (result = True) <-> (exists j  : int.
      ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___old_205 j))) )) )} 
     ) ) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2752"  : int.
    ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) -> (exists j  : int.
     ( ( ((Standard__integer__rep.to_rep Bubble__sort__a.a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Bubble__sort__a.a__last)) ) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Bubble__sort__a.a.Array__Int__Standard__integer.map__content i)) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get temp___old_205 j))) )) )) )} 
   ) ) in (
    ()))
    end  )))
   )
end
