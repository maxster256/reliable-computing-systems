(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4b" defined at rev.adb:4, created in Gnat2Why.Types.Translate_Type *)
module Rev__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at rev.adb:1, created in Gnat2Why.Types.Translate_Type *)
module Rev__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at rev.adb:1, created in Gnat2Why.Types.Translate_Type *)
module Rev__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Rev__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Rev__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTunreversed_stringSP1" defined at rev.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Rev__TTunreversed_stringSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTunreversed_stringSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTunreversed_stringSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTunreversed_stringSP1__ref =
  { mutable tTunreversed_stringSP1__content "model_trace:" "name:" : tTunreversed_stringSP1 }
 
 function tTunreversed_stringSP1__ref___projection 
   (a : tTunreversed_stringSP1__ref) : tTunreversed_stringSP1 =
  a.tTunreversed_stringSP1__content
 
 meta "model_projection" function tTunreversed_stringSP1__ref___projection
 
 meta "inline : no" function tTunreversed_stringSP1__ref___projection
 
 val tTunreversed_stringSP1__havoc 
   (x : tTunreversed_stringSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tunreversed_stringS" defined at rev.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Rev__Tunreversed_stringS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Rev__TTunreversed_stringSP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Rev__TTunreversed_stringSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tunreversed_stringS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tunreversed_stringS__ref =
  { mutable tunreversed_stringS__content "model_trace:" "name:" : tunreversed_stringS }
 
 function tunreversed_stringS__ref___projection 
   (a : tunreversed_stringS__ref) : tunreversed_stringS =
  a.tunreversed_stringS__content
 
 meta "model_projection" function tunreversed_stringS__ref___projection
 
 meta "inline : no" function tunreversed_stringS__ref___projection
 
 val tunreversed_stringS__havoc 
   (x : tunreversed_stringS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at rev.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Rev__L_1__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at rev.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Rev__L_1__L9b__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content "model_trace:" "name:" : t10b }
 
 function t10b__ref___projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at rev.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Rev__L_1__L7b__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t8b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref =
  { mutable t8b__content "model_trace:" "name:" : t8b }
 
 function t8b__ref___projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref___projection
 
 meta "inline : no" function t8b__ref___projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "s" defined at rev.adb:1, created in Gnat2Why.Decls.Translate_Variable *)
module Rev__s
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val s #"rev.adb" 1 0 0#"model_projected" "model_trace:2300" "name:S"  : Array__Int__Standard__character.map__ref 
 
 function s__first #"rev.adb" 1 0 0#"model_projected" "name:S" "model_trace:2300'First" 
   : Standard__integer.integer
 
 function s__last #"rev.adb" 1 0 0#"model_projected" "name:S" "model_trace:2300'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at rev.adb:1, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Rev__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "unreversed_string" defined at rev.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Rev__unreversed_string
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val unreversed_string #"rev.adb" 6 0 0#"model_projected" "model_trace:2369" "name:Unreversed_String"  : Array__Int__Standard__character.map__ref 
 
 function unreversed_string__first #"rev.adb" 6 0 0#"model_projected" "name:Unreversed_String" "model_trace:2369'First" 
   : Standard__integer.integer
 
 function unreversed_string__last #"rev.adb" 6 0 0#"model_projected" "name:Unreversed_String" "model_trace:2369'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "unreversed_string" defined at rev.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Rev__unreversed_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at rev.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Rev__L_1__i
 use import "_gnatprove_standard".Main

 val i #"rev.adb" 8 0 0#"model_projected" "model_trace:2386" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at rev.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Rev__L_1__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "rev" defined at rev.adb:1, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Rev
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at rev.adb:8, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Rev__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at rev.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Rev__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at rev.adb:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at rev.adb:1, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at rev.adb:1, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Rev__s
 use        Rev__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_162 : Rev__S1b.s1b) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool)  =
  (if (temp___skip_constant_159) then (
   true) else (
   ( (Rev__S1b.dynamic_property (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last) (Rev__S1b.first temp___expr_162) (Rev__S1b.last temp___expr_162)) /\ ( ((Rev__S1b.first temp___expr_162) = (Standard__integer__rep.to_rep Rev__s.s__first)) /\ ((Rev__S1b.last temp___expr_162) = (Standard__integer__rep.to_rep Rev__s.s__last)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_164 : Rev__S1b.s1b) (temp___skip_top_level_165 : bool)  =
  true

end

(* Module giving axioms for type "TTunreversed_stringSP1" defined at rev.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__TTunreversed_stringSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tunreversed_stringS" defined at rev.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__Tunreversed_stringS___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Rev__s
 use        Rev__Tunreversed_stringS

 predicate dynamic_invariant "inline" 
   (temp___expr_172 : Rev__Tunreversed_stringS.tunreversed_stringS) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool)  =
  (if (temp___skip_constant_169) then (
   true) else (
   ( (Rev__Tunreversed_stringS.dynamic_property (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last) (Rev__Tunreversed_stringS.first temp___expr_172) (Rev__Tunreversed_stringS.last temp___expr_172)) /\ ( ((Rev__Tunreversed_stringS.first temp___expr_172) = (Standard__integer__rep.to_rep Rev__s.s__first)) /\ ((Rev__Tunreversed_stringS.last temp___expr_172) = (Standard__integer__rep.to_rep Rev__s.s__last)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : Rev__Tunreversed_stringS.tunreversed_stringS) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "T6b" defined at rev.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__L_1__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10b" defined at rev.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__L_1__L9b__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8b" defined at rev.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Rev__L_1__L7b__T8b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "rev" defined at rev.adb:1, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Rev___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val rev 
   (s : Array__Int__Standard__character.map__ref) (s__first : Standard__integer.integer) (s__last : Standard__integer.integer) : unit
  requires {  ( ((Standard__integer__rep.to_rep s__first) < 1073741823) /\ ((Standard__integer__rep.to_rep s__last) < 1073741823) ) }
  ensures {  ( (forall i   "model" "name:I" "model_trace:2340"  : int.
   ( ( ((Standard__integer__rep.to_rep s__first) <= i) /\ (i <= (Standard__integer__rep.to_rep s__last)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get s.Array__Int__Standard__character.map__content i)) = (Standard__character__rep.to_rep (let temp___154 = (old s.Array__Int__Standard__character.map__content ) in (
    (Array__Int__Standard__character.get temp___154 (((Standard__integer__rep.to_rep s__first) + (Standard__integer__rep.to_rep s__last)) - i))))
   )) )) /\ (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep s__first) (Standard__integer__rep.to_rep s__last)))) ) }
  writes {s}

end

(* Module for checking contracts and absence of run-time errors in subprogram "rev" defined at rev.adb:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Rev__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Array__Int__Standard__character
 use        Rev__s
 use        Rev__Tunreversed_stringS
 use        Array__Int__Standard__character
 use        Rev__unreversed_string
 use        Rev__L_1
 use        Rev__L_1__T6b
 use        Rev__L_1__i
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Rev__s___axiom
 use        Rev__unreversed_string___axiom
 use        Rev__L_1__i___axiom
 use        Rev__L_1___axiom
 use        Rev__Tunreversed_stringS___axiom
 use        Rev__TTunreversed_stringSP1___axiom
 use        Rev__L_1__T6b___axiom

 let def #"rev.adb" 1 0 0#"GP_Subp:rev.adb:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"rev.adb" 1 0 0# true }
  ensures { #"rev.adb" 1 0 0# (#"rev.adb" 4 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:rev.adb:4:11" "GP_Reason:VC_POSTCONDITION" "GP_Id:14" "comment:  Post => (for all I in S'Range => S(I) = S'Old(S'First + S'Last - I))
          ^ rev.adb:4:11:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall i #"rev.adb" 4 0 0#  "model" "name:I" "model_trace:2340"  : int.
   ( ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Rev__s.s__last)) ) -> ( "GP_Pretty_Ada:2354" "GP_Sloc:rev.adb:4:36" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__s.s.Array__Int__Standard__character.map__content i)) = (Standard__character__rep.to_rep (let temp___192 = (old Rev__s.s.Array__Int__Standard__character.map__content ) in (
    (Array__Int__Standard__character.get temp___192 (((Standard__integer__rep.to_rep Rev__s.s__first) + (Standard__integer__rep.to_rep Rev__s.s__last)) - i))))
   )) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram rev.adb:1 *)
  ;
   assume {  (if (False) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last)))) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram rev.adb:1 *)
  ;
  () (* Check for RTE in the Pre of the subprogram rev.adb:1 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
   ()))
   end ;
  Rev__s.s__first ))) < 1073741823)) (((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
   ()))
   end ;
  Rev__s.s__last ))) < 1073741823))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram rev.adb:1 *)
  ;
   assume {  ( ((Standard__integer__rep.to_rep Rev__s.s__first) < 1073741823) /\ ((Standard__integer__rep.to_rep Rev__s.s__last) < 1073741823) ) };
   abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
   ()))
   end ;
  (let temp___old_188 =  (any Array__Int__Standard__character.map
  ensures { (result = Rev__s.s.Array__Int__Standard__character.map__content)} 
  ) in (
   (  try
    ( (#"rev.adb" 4 0 0# ());
    (#"rev.adb" 3 0 0# ());
    (#"rev.adb" 2 0 0# ());
    (#"rev.adb" 1 0 0# ());
    (#"rev.adb" 6 0 0# (#"rev.adb" 6 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:6:4" "GP_Reason:VC_RANGE_CHECK" "GP_Id:0" "comment:   Unreversed_String : String (S'Range) := S;
   ^ rev.adb:6:4:VC_RANGE_CHECK" #"rev.adb" 6 0 0# (any unit
    requires {#"rev.adb" 6 0 0# ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= (Standard__integer__rep.to_rep Rev__s.s__last)) -> ( ((Standard__integer__rep.to_rep Rev__s.s__first) >= Standard__positive.first) /\ ((Standard__integer__rep.to_rep Rev__s.s__last) <= Standard__positive.last) ) )} 
    ensures {#"rev.adb" 6 0 0# true} 
    ) )));
    (#"rev.adb" 6 0 0# ( (let rev__unreversed_string__assume = ( #"rev.adb" 6 0 0# assert { #"rev.adb" 6 0 0# (#"rev.adb" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:6:44" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:1" "comment:   Unreversed_String : String (S'Range) := S;
                                           ^ rev.adb:6:44:VC_LENGTH_CHECK" "GP_Shape:unreversed_string_decl" ((if (((Standard__integer__rep.to_rep(Rev__s.s__first)) <= (Standard__integer__rep.to_rep(Rev__s.s__last)))) then (
     (((Standard__integer__rep.to_rep(Rev__s.s__last)) - (Standard__integer__rep.to_rep(Rev__s.s__first))) + 1)) else (
     0)) = (if (((Standard__integer__rep.to_rep Rev__s.s__first) <= (Standard__integer__rep.to_rep Rev__s.s__last))) then (
     (((Standard__integer__rep.to_rep Rev__s.s__last) - (Standard__integer__rep.to_rep Rev__s.s__first)) + 1)) else (
     0))) )) };
    (Rev__Tunreversed_stringS.of_array((Array__Int__Standard__character.slide(Rev__s.s.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Rev__s.s__first))) ((Standard__integer__rep.to_rep Rev__s.s__first)))) ((Standard__integer__rep.to_rep Rev__s.s__first)) ((Standard__integer__rep.to_rep Rev__s.s__last))) ) in (
     (  Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content <- ( (Rev__Tunreversed_stringS.to_array(rev__unreversed_string__assume)) );
      assume {  ((Standard__integer__rep.to_rep(Rev__unreversed_string.unreversed_string__first)) = (Rev__Tunreversed_stringS.first(rev__unreversed_string__assume))) };
      assume {  ((Standard__integer__rep.to_rep(Rev__unreversed_string.unreversed_string__last)) = (Rev__Tunreversed_stringS.last(rev__unreversed_string__assume))) } )))
    ;
     assume {  (if (False) then (
     true) else (
     ( (Rev__Tunreversed_stringS.dynamic_property (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last) (Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__first) (Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__last)) /\ ( ((Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__first) = (Standard__integer__rep.to_rep Rev__s.s__first)) /\ ((Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__last) = (Standard__integer__rep.to_rep Rev__s.s__last)) ) ))) } ));
    (#"rev.adb" 8 0 0# ());
    ( "GP_Sloc:rev.adb:8:21" (#"rev.adb" 8 0 0# (let temp___179 = (Standard__integer__rep.to_rep(( #"rev.adb" 8 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
     ()))
     end ;
    Rev__s.s__first ))) in (
    (let temp___180 = (Standard__integer__rep.to_rep(( #"rev.adb" 8 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
     ()))
     end ;
    Rev__s.s__last ))) in (
     ( #"rev.adb" 8 0 0# Rev__L_1__i.i.int__content <- ( temp___179 );
     () (* Translation of an Ada loop from rev.adb:8 *)
     ;
     (if ((Boolean.andb((temp___179 <= Rev__L_1__i.i.int__content)) ((Rev__L_1__i.i.int__content <= temp___180)))) then (
      #"rev.adb" 8 0 0# try
       ( #"rev.adb" 8 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
        ()))
        end ;
       (let temp___184 = #"rev.adb" 8 0 0# (any Array__Int__Standard__character.map
       ensures {#"rev.adb" 8 0 0# (result = Rev__s.s.Array__Int__Standard__character.map__content)} 
       ) in (
        ( #"rev.adb" 8 0 0# abstract ensures {true}(let _ = Rev__L_1__i.i.int__content in (
         ()))
         end ;
        (let temp___182 = #"rev.adb" 8 0 0# (any int
        ensures {#"rev.adb" 8 0 0# (result = Rev__L_1__i.i.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop rev.adb:8 *)
         ;
         ( "GP_Sloc:rev.adb:10:16" (#"rev.adb" 10 0 0# ()) );
         ( "GP_Sloc:rev.adb:10:13" (#"rev.adb" 10 0 0# #"rev.adb" 10 0 0# Rev__s.s.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Rev__s.s.Array__Int__Standard__character.map__content) (Rev__L_1__i.i.int__content) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content) ((let temp___181 = (#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:10:46" "GP_Id:3" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                             ^ rev.adb:10:46:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__s_assign__ixdcomp__add" (Standard__integer.range_check_(((#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:10:42" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                         ^ rev.adb:10:42:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__s_assign__ixdcomp__add__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"rev.adb" 10 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
          ()))
          end ;
         Rev__s.s__last ))) - Rev__L_1__i.i.int__content))) )) + (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
          ()))
          end ;
         Rev__s.s__first )))))) )) in (
          (  assert {  (#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:10:46" "GP_Shape:L_1_while__s_assign__ixdcomp__add" "GP_Reason:VC_INDEX_CHECK" "GP_Id:4" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                             ^ rev.adb:10:46:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__first) <= temp___181) /\ (temp___181 <= (Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__last)) ) )) };
          temp___181 )))
         )))))))) )) );
         () (* While loop translating the Ada loop from rev.adb:8 *)
         ;
          while True do
          invariant { 
           (#"rev.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:14:30" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:9" "comment:      pragma Loop_Invariant (for all J in S'First .. I => S(J) = Unreversed_String (S'Last - J + S'First));
                             ^ rev.adb:14:30:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"rev.adb" 14 0 0#  "model" "model_trace:2417" "name:J"  : int.
            ( ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= j) /\ (j <= Rev__L_1__i.i.int__content) ) -> ( "GP_Pretty_Ada:2434" "GP_Sloc:rev.adb:14:59" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__s.s.Array__Int__Standard__character.map__content j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content (((Standard__integer__rep.to_rep Rev__s.s__last) - j) + (Standard__integer__rep.to_rep Rev__s.s__first))))) ) )) ))
           }
          ( () (* Assume implicit invariants from the loop rev.adb:8 *)
          ;
           assume {  (Boolean.andb(( ( ( ( true /\ (if (((Standard__integer__rep.to_rep Rev__s.s__first) <= (Standard__integer__rep.to_rep Rev__s.s__last))) then (
           (Rev__L_1__T6b.dynamic_property (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last) Rev__L_1__i.i.int__content)) else true) ) /\ true ) /\ (if (True) then (
           true) else (
           (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Rev__s.s__first) (Standard__integer__rep.to_rep Rev__s.s__last)))) ) /\ (forall temp___185   : int.
           (if (( ((Standard__integer__rep.to_rep Rev__s.s__first) <= temp___185) /\ (temp___185 <= (Standard__integer__rep.to_rep Rev__s.s__last)) )) then (
            (if (( (temp___180 < temp___185) \/ ( (temp___185 < temp___179) \/ (Rev__L_1__i.i.int__content < temp___185) ) )) then (
             ((Array__Int__Standard__character.get Rev__s.s.Array__Int__Standard__character.map__content temp___185) = (Array__Int__Standard__character.get temp___184 temp___185))) else (
             true))) else true)) )) (( ((Standard__integer__rep.to_rep Rev__s.s__first) <= Rev__L_1__i.i.int__content) /\ (Rev__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Rev__s.s__last)) ))) };
          () (* Check for absence of RTE in the invariant of loop rev.adb:8 *)
          ;
           abstract ensures {true}(let _ = ( (let j =  (any int
          ) in (
           (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
            ()))
            end ;
           Rev__s.s__first ))) <= j)) ((j <= Rev__L_1__i.i.int__content)))) then (
             abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Rev__s.s.Array__Int__Standard__character.map__content) ((  assert {  (#"rev.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:rev.adb:14:61" "GP_Id:5" "comment:      pragma Loop_Invariant (for all J in S'First .. I => S(J) = Unreversed_String (S'Last - J + S'First));
                                                            ^ rev.adb:14:61:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Rev__s.s__last)) ) )) };
            j ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content) ((let temp___186 = (#"rev.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:14:96" "GP_Id:7" "comment:      pragma Loop_Invariant (for all J in S'First .. I => S(J) = Unreversed_String (S'Last - J + S'First));
                                                                                               ^ rev.adb:14:96:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp__add" (Standard__integer.range_check_(((#"rev.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:14:92" "GP_Id:6" "comment:      pragma Loop_Invariant (for all J in S'First .. I => S(J) = Unreversed_String (S'Last - J + S'First));
                                                                                           ^ rev.adb:14:92:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp__add__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"rev.adb" 14 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Rev__s.s__last ))) - j))) )) + (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Rev__s.s__first )))))) )) in (
             (  assert {  (#"rev.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:rev.adb:14:96" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp__add" "GP_Id:8" "comment:      pragma Loop_Invariant (for all J in S'First .. I => S(J) = Unreversed_String (S'Last - J + S'First));
                                                                                               ^ rev.adb:14:96:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__first) <= temp___186) /\ (temp___186 <= (Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__last)) ) )) };
             temp___186 )))
            ))))) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall j   "model" "model_trace:2417" "name:J"  : int.
           ( ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= j) /\ (j <= Rev__L_1__i.i.int__content) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__s.s.Array__Int__Standard__character.map__content j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content (((Standard__integer__rep.to_rep Rev__s.s__last) - j) + (Standard__integer__rep.to_rep Rev__s.s__first))))) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop rev.adb:8 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop rev.adb:8 *)
          ;
          (if ((Rev__L_1__i.i.int__content = temp___180)) then (
            raise Rev__L_1.L_1));
           Rev__L_1__i.i.int__content <- ( (Rev__L_1__i.i.int__content + 1) );
          ( "GP_Sloc:rev.adb:10:16" (#"rev.adb" 10 0 0# ()) );
          ( "GP_Sloc:rev.adb:10:13" (#"rev.adb" 10 0 0# #"rev.adb" 10 0 0# Rev__s.s.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Rev__s.s.Array__Int__Standard__character.map__content) (Rev__L_1__i.i.int__content) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Rev__unreversed_string.unreversed_string.Array__Int__Standard__character.map__content) ((let temp___181 = (#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:10:46" "GP_Id:3" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                             ^ rev.adb:10:46:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__s_assign__ixdcomp__add" (Standard__integer.range_check_(((#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:10:42" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                         ^ rev.adb:10:42:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__s_assign__ixdcomp__add__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"rev.adb" 10 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Rev__s.s__last ))) - Rev__L_1__i.i.int__content))) )) + (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Rev__s.s__first )))))) )) in (
           (  assert {  (#"rev.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:rev.adb:10:46" "GP_Shape:L_1_while__s_assign__ixdcomp__add" "GP_Reason:VC_INDEX_CHECK" "GP_Id:4" "comment:      S (I) := Unreversed_String (S'Last - I + S'First);
                                             ^ rev.adb:10:46:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__first) <= temp___181) /\ (temp___181 <= (Standard__integer__rep.to_rep Rev__unreversed_string.unreversed_string__last)) ) )) };
           temp___181 )))
          )))))))) )) ) )
         done )))
         )))
        )
      with
       Rev__L_1.L_1 -> ()
      end)) )))
    ))
    ) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
     ()))
     end ;
    Rev__s.s__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
     ()))
     end ;
    Rev__s.s__last ))))))) then (
      abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Rev__s.s.Array__Int__Standard__character.map__content) ((  assert {  (#"rev.adb" 4 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:rev.adb:4:38" "GP_Id:10" "comment:  Post => (for all I in S'Range => S(I) = S'Old(S'First + S'Last - I))
                                     ^ rev.adb:4:38:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Rev__s.s__last)) ) )) };
     i ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get(temp___old_188) ((let temp___189 = (#"rev.adb" 4 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:4:66" "GP_Id:12" "comment:  Post => (for all I in S'Range => S(I) = S'Old(S'First + S'Last - I))
                                                                 ^ rev.adb:4:66:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp__sub" (Standard__integer.range_check_(((#"rev.adb" 4 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:rev.adb:4:57" "GP_Id:11" "comment:  Post => (for all I in S'Range => S(I) = S'Old(S'First + S'Last - I))
                                                        ^ rev.adb:4:57:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp__sub__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"rev.adb" 4 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
      ()))
      end ;
     Rev__s.s__first ))) + (Standard__integer__rep.to_rep(( #"rev.adb" 4 0 0# abstract ensures {true}(let _ = Rev__s.s.Array__Int__Standard__character.map__content in (
      ()))
      end ;
     Rev__s.s__last )))))) )) - i))) )) in (
      (  assert {  (#"rev.adb" 4 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:rev.adb:4:66" "GP_Shape:pragargs__forall__cmp__ixdcomp__sub" "GP_Id:13" "comment:  Post => (for all I in S'Range => S(I) = S'Old(S'First + S'Last - I))
                                                                 ^ rev.adb:4:66:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= temp___189) /\ (temp___189 <= (Standard__integer__rep.to_rep Rev__s.s__last)) ) )) };
      temp___189 )))
     ))))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2340"  : int.
    ( ( ((Standard__integer__rep.to_rep Rev__s.s__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Rev__s.s__last)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Rev__s.s.Array__Int__Standard__character.map__content i)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___old_188 (((Standard__integer__rep.to_rep Rev__s.s__first) + (Standard__integer__rep.to_rep Rev__s.s__last)) - i)))) )) )} 
   ) ) in (
    ()))
    end  )))
   )
end
