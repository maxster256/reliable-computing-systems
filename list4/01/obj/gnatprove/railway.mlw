(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "one_signal_state" defined at railway.ads:2, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int

 type one_signal_state 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = one_signal_state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type one_signal_state__ref =
  { mutable one_signal_state__content "model_trace:" "name:" : one_signal_state }
 
 function one_signal_state__ref___projection 
   (a : one_signal_state__ref) : one_signal_state =
  a.one_signal_state__content
 
 meta "model_projection" function one_signal_state__ref___projection
 
 meta "inline : no" function one_signal_state__ref___projection
 
 val one_signal_state__havoc 
   (x : one_signal_state__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "one_signal_state" defined at railway.ads:2, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_signal_state__rep
 use        Railway__one_signal_state
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Railway__one_signal_state.one_signal_state, 
 predicate in_range = Railway__one_signal_state.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "route_type" defined at railway.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Railway__route_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type route_type 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  7
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = route_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type route_type__ref =
  { mutable route_type__content "model_trace:" "name:" : route_type }
 
 function route_type__ref___projection 
   (a : route_type__ref) : route_type =
  a.route_type__content
 
 meta "model_projection" function route_type__ref___projection
 
 meta "inline : no" function route_type__ref___projection
 
 val route_type__havoc 
   (x : route_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "route_type" defined at railway.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Railway__route_type__rep
 use        Railway__route_type
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Railway__route_type.route_type, 
 predicate in_range = Railway__route_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "one_segment_state" defined at railway.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_segment_state
 use import "_gnatprove_standard".Main
 use import "int".Int

 type one_segment_state 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  5
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = one_segment_state, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type one_segment_state__ref =
  { mutable one_segment_state__content "model_trace:" "name:" : one_segment_state }
 
 function one_segment_state__ref___projection 
   (a : one_segment_state__ref) : one_segment_state =
  a.one_segment_state__content
 
 meta "model_projection" function one_segment_state__ref___projection
 
 meta "inline : no" function one_segment_state__ref___projection
 
 val one_segment_state__havoc 
   (x : one_segment_state__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "one_segment_state" defined at railway.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Railway__one_segment_state__rep
 use        Railway__one_segment_state
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Railway__one_segment_state.one_segment_state, 
 predicate in_range = Railway__one_segment_state.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "segment_state_type" defined at railway.ads:20, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Railway__segment_state_type__rep
 use import "_gnatprove_standard".Main
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep

 type __split_fields =
  { rec__railway__segment_state_type__left "model_trace:.2959" "name:Left" : Railway__one_segment_state.one_segment_state; rec__railway__segment_state_type__middle "model_trace:.2966" "name:Middle" : Railway__one_segment_state.one_segment_state; rec__railway__segment_state_type__right "model_trace:.2973" "name:Right" : Railway__one_segment_state.one_segment_state }
 
 function __split_fields_Left__projection "model_trace:.2959" "name:Left" 
   (a : __split_fields) : Railway__one_segment_state.one_segment_state =
  a.rec__railway__segment_state_type__left
 
 meta "model_projection" function __split_fields_Left__projection
 
 meta "inline : no" function __split_fields_Left__projection
 
 function __split_fields_Middle__projection "model_trace:.2966" "name:Middle" 
   (a : __split_fields) : Railway__one_segment_state.one_segment_state =
  a.rec__railway__segment_state_type__middle
 
 meta "model_projection" function __split_fields_Middle__projection
 
 meta "inline : no" function __split_fields_Middle__projection
 
 function __split_fields_Right__projection "model_trace:.2973" "name:Right" 
   (a : __split_fields) : Railway__one_segment_state.one_segment_state =
  a.rec__railway__segment_state_type__right
 
 meta "model_projection" function __split_fields_Right__projection
 
 meta "inline : no" function __split_fields_Right__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate railway__segment_state_type__left__pred 
   (a : __rep)  =
  true
 
 val rec__railway__segment_state_type__left_ 
   (a : __rep) : Railway__one_segment_state.one_segment_state
  requires {  (railway__segment_state_type__left__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__segment_state_type__left) }
 
 predicate railway__segment_state_type__middle__pred 
   (a : __rep)  =
  true
 
 val rec__railway__segment_state_type__middle_ 
   (a : __rep) : Railway__one_segment_state.one_segment_state
  requires {  (railway__segment_state_type__middle__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__segment_state_type__middle) }
 
 predicate railway__segment_state_type__right__pred 
   (a : __rep)  =
  true
 
 val rec__railway__segment_state_type__right_ 
   (a : __rep) : Railway__one_segment_state.one_segment_state
  requires {  (railway__segment_state_type__right__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__segment_state_type__right) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ((Railway__one_segment_state__rep.to_rep a.__split_fields.rec__railway__segment_state_type__left) = (Railway__one_segment_state__rep.to_rep b.__split_fields.rec__railway__segment_state_type__left)) /\ ((Railway__one_segment_state__rep.to_rep a.__split_fields.rec__railway__segment_state_type__middle) = (Railway__one_segment_state__rep.to_rep b.__split_fields.rec__railway__segment_state_type__middle)) ) /\ ((Railway__one_segment_state__rep.to_rep a.__split_fields.rec__railway__segment_state_type__right) = (Railway__one_segment_state__rep.to_rep b.__split_fields.rec__railway__segment_state_type__right)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "segment_state_type" defined at railway.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Railway__segment_state_type
 use export Railway__segment_state_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type segment_state_type =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : segment_state_type) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : segment_state_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : segment_state_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : segment_state_type.
   ((object__alignment a) >= 0))
 
 function railway__segment_state_type__left__first__bit 
   : int
 
 function railway__segment_state_type__left__last__bit 
   : int
 
 function railway__segment_state_type__left__position 
   : int
 
 axiom railway__segment_state_type__left__first__bit_axiom :
  ((railway__segment_state_type__left__first__bit ) >= 0)
 
 axiom railway__segment_state_type__left__last__bit_axiom :
  ((railway__segment_state_type__left__last__bit ) > (railway__segment_state_type__left__first__bit ))
 
 axiom railway__segment_state_type__left__position_axiom :
  ((railway__segment_state_type__left__position ) >= 0)
 
 function railway__segment_state_type__middle__first__bit 
   : int
 
 function railway__segment_state_type__middle__last__bit 
   : int
 
 function railway__segment_state_type__middle__position 
   : int
 
 axiom railway__segment_state_type__middle__first__bit_axiom :
  ((railway__segment_state_type__middle__first__bit ) >= 0)
 
 axiom railway__segment_state_type__middle__last__bit_axiom :
  ((railway__segment_state_type__middle__last__bit ) > (railway__segment_state_type__middle__first__bit ))
 
 axiom railway__segment_state_type__middle__position_axiom :
  ((railway__segment_state_type__middle__position ) >= 0)
 
 function railway__segment_state_type__right__first__bit 
   : int
 
 function railway__segment_state_type__right__last__bit 
   : int
 
 function railway__segment_state_type__right__position 
   : int
 
 axiom railway__segment_state_type__right__first__bit_axiom :
  ((railway__segment_state_type__right__first__bit ) >= 0)
 
 axiom railway__segment_state_type__right__last__bit_axiom :
  ((railway__segment_state_type__right__last__bit ) > (railway__segment_state_type__right__first__bit ))
 
 axiom railway__segment_state_type__right__position_axiom :
  ((railway__segment_state_type__right__position ) >= 0)
 
 function user_eq 
   (a : segment_state_type) (b : segment_state_type) : bool
 
 function dummy 
   : segment_state_type
 
 type segment_state_type__ref =
  { mutable segment_state_type__content "model_trace:" "name:" : segment_state_type }
 
 function segment_state_type__ref___projection 
   (a : segment_state_type__ref) : segment_state_type =
  a.segment_state_type__content
 
 meta "model_projection" function segment_state_type__ref___projection
 
 meta "inline : no" function segment_state_type__ref___projection
 
 val segment_state_type__havoc 
   (x : segment_state_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "signal_state_type" defined at railway.ads:27, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Railway__signal_state_type__rep
 use import "_gnatprove_standard".Main
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep

 type __split_fields =
  { rec__railway__signal_state_type__left_middle "model_trace:.3001" "name:Left_Middle" : Railway__one_signal_state.one_signal_state; rec__railway__signal_state_type__middle_left "model_trace:.3008" "name:Middle_Left" : Railway__one_signal_state.one_signal_state; rec__railway__signal_state_type__middle_right "model_trace:.3015" "name:Middle_Right" : Railway__one_signal_state.one_signal_state; rec__railway__signal_state_type__right_middle "model_trace:.3022" "name:Right_Middle" : Railway__one_signal_state.one_signal_state }
 
 function __split_fields_Left_Middle__projection "model_trace:.3001" "name:Left_Middle" 
   (a : __split_fields) : Railway__one_signal_state.one_signal_state =
  a.rec__railway__signal_state_type__left_middle
 
 meta "model_projection" function __split_fields_Left_Middle__projection
 
 meta "inline : no" function __split_fields_Left_Middle__projection
 
 function __split_fields_Middle_Left__projection "model_trace:.3008" "name:Middle_Left" 
   (a : __split_fields) : Railway__one_signal_state.one_signal_state =
  a.rec__railway__signal_state_type__middle_left
 
 meta "model_projection" function __split_fields_Middle_Left__projection
 
 meta "inline : no" function __split_fields_Middle_Left__projection
 
 function __split_fields_Middle_Right__projection "model_trace:.3015" "name:Middle_Right" 
   (a : __split_fields) : Railway__one_signal_state.one_signal_state =
  a.rec__railway__signal_state_type__middle_right
 
 meta "model_projection" function __split_fields_Middle_Right__projection
 
 meta "inline : no" function __split_fields_Middle_Right__projection
 
 function __split_fields_Right_Middle__projection "model_trace:.3022" "name:Right_Middle" 
   (a : __split_fields) : Railway__one_signal_state.one_signal_state =
  a.rec__railway__signal_state_type__right_middle
 
 meta "model_projection" function __split_fields_Right_Middle__projection
 
 meta "inline : no" function __split_fields_Right_Middle__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate railway__signal_state_type__left_middle__pred 
   (a : __rep)  =
  true
 
 val rec__railway__signal_state_type__left_middle_ 
   (a : __rep) : Railway__one_signal_state.one_signal_state
  requires {  (railway__signal_state_type__left_middle__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__signal_state_type__left_middle) }
 
 predicate railway__signal_state_type__middle_left__pred 
   (a : __rep)  =
  true
 
 val rec__railway__signal_state_type__middle_left_ 
   (a : __rep) : Railway__one_signal_state.one_signal_state
  requires {  (railway__signal_state_type__middle_left__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__signal_state_type__middle_left) }
 
 predicate railway__signal_state_type__middle_right__pred 
   (a : __rep)  =
  true
 
 val rec__railway__signal_state_type__middle_right_ 
   (a : __rep) : Railway__one_signal_state.one_signal_state
  requires {  (railway__signal_state_type__middle_right__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__signal_state_type__middle_right) }
 
 predicate railway__signal_state_type__right_middle__pred 
   (a : __rep)  =
  true
 
 val rec__railway__signal_state_type__right_middle_ 
   (a : __rep) : Railway__one_signal_state.one_signal_state
  requires {  (railway__signal_state_type__right_middle__pred a) }
  ensures {  (result = a.__split_fields.rec__railway__signal_state_type__right_middle) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ((Railway__one_signal_state__rep.to_rep a.__split_fields.rec__railway__signal_state_type__left_middle) = (Railway__one_signal_state__rep.to_rep b.__split_fields.rec__railway__signal_state_type__left_middle)) /\ ((Railway__one_signal_state__rep.to_rep a.__split_fields.rec__railway__signal_state_type__middle_left) = (Railway__one_signal_state__rep.to_rep b.__split_fields.rec__railway__signal_state_type__middle_left)) ) /\ ((Railway__one_signal_state__rep.to_rep a.__split_fields.rec__railway__signal_state_type__middle_right) = (Railway__one_signal_state__rep.to_rep b.__split_fields.rec__railway__signal_state_type__middle_right)) ) /\ ((Railway__one_signal_state__rep.to_rep a.__split_fields.rec__railway__signal_state_type__right_middle) = (Railway__one_signal_state__rep.to_rep b.__split_fields.rec__railway__signal_state_type__right_middle)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "signal_state_type" defined at railway.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Railway__signal_state_type
 use export Railway__signal_state_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type signal_state_type =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : signal_state_type) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : signal_state_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : signal_state_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : signal_state_type.
   ((object__alignment a) >= 0))
 
 function railway__signal_state_type__left_middle__first__bit 
   : int
 
 function railway__signal_state_type__left_middle__last__bit 
   : int
 
 function railway__signal_state_type__left_middle__position 
   : int
 
 axiom railway__signal_state_type__left_middle__first__bit_axiom :
  ((railway__signal_state_type__left_middle__first__bit ) >= 0)
 
 axiom railway__signal_state_type__left_middle__last__bit_axiom :
  ((railway__signal_state_type__left_middle__last__bit ) > (railway__signal_state_type__left_middle__first__bit ))
 
 axiom railway__signal_state_type__left_middle__position_axiom :
  ((railway__signal_state_type__left_middle__position ) >= 0)
 
 function railway__signal_state_type__middle_left__first__bit 
   : int
 
 function railway__signal_state_type__middle_left__last__bit 
   : int
 
 function railway__signal_state_type__middle_left__position 
   : int
 
 axiom railway__signal_state_type__middle_left__first__bit_axiom :
  ((railway__signal_state_type__middle_left__first__bit ) >= 0)
 
 axiom railway__signal_state_type__middle_left__last__bit_axiom :
  ((railway__signal_state_type__middle_left__last__bit ) > (railway__signal_state_type__middle_left__first__bit ))
 
 axiom railway__signal_state_type__middle_left__position_axiom :
  ((railway__signal_state_type__middle_left__position ) >= 0)
 
 function railway__signal_state_type__middle_right__first__bit 
   : int
 
 function railway__signal_state_type__middle_right__last__bit 
   : int
 
 function railway__signal_state_type__middle_right__position 
   : int
 
 axiom railway__signal_state_type__middle_right__first__bit_axiom :
  ((railway__signal_state_type__middle_right__first__bit ) >= 0)
 
 axiom railway__signal_state_type__middle_right__last__bit_axiom :
  ((railway__signal_state_type__middle_right__last__bit ) > (railway__signal_state_type__middle_right__first__bit ))
 
 axiom railway__signal_state_type__middle_right__position_axiom :
  ((railway__signal_state_type__middle_right__position ) >= 0)
 
 function railway__signal_state_type__right_middle__first__bit 
   : int
 
 function railway__signal_state_type__right_middle__last__bit 
   : int
 
 function railway__signal_state_type__right_middle__position 
   : int
 
 axiom railway__signal_state_type__right_middle__first__bit_axiom :
  ((railway__signal_state_type__right_middle__first__bit ) >= 0)
 
 axiom railway__signal_state_type__right_middle__last__bit_axiom :
  ((railway__signal_state_type__right_middle__last__bit ) > (railway__signal_state_type__right_middle__first__bit ))
 
 axiom railway__signal_state_type__right_middle__position_axiom :
  ((railway__signal_state_type__right_middle__position ) >= 0)
 
 function user_eq 
   (a : signal_state_type) (b : signal_state_type) : bool
 
 function dummy 
   : signal_state_type
 
 type signal_state_type__ref =
  { mutable signal_state_type__content "model_trace:" "name:" : signal_state_type }
 
 function signal_state_type__ref___projection 
   (a : signal_state_type__ref) : signal_state_type =
  a.signal_state_type__content
 
 meta "model_projection" function signal_state_type__ref___projection
 
 meta "inline : no" function signal_state_type__ref___projection
 
 val signal_state_type__havoc 
   (x : signal_state_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "route" defined at railway.ads:66, created in Gnat2Why.Decls.Translate_Constant *)
module Railway__open_route__route
 use import "_gnatprove_standard".Main

 function route #"railway.ads" 66 0 0#"model" "model_trace:3214" "name:Route" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "route" defined at railway.ads:66, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__open_route__route___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "route" defined at railway.ads:74, created in Gnat2Why.Decls.Translate_Constant *)
module Railway__move_train__route
 use import "_gnatprove_standard".Main

 function route #"railway.ads" 74 0 0#"model" "name:Route" "model_trace:3281" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "route" defined at railway.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__move_train__route___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining a ref holding the value of variable "segment_state" defined at railway.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__segment_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type

 val segment_state__split_fields #"railway.ads" 35 0 0#"model_projected" "model_trace:3043" "name:Segment_State"  : Railway__segment_state_type.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "segment_state" defined at railway.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__segment_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "signal_state" defined at railway.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__signal_state_type

 val signal_state__split_fields #"railway.ads" 36 0 0#"model_projected" "model_trace:3056" "name:Signal_State"  : Railway__signal_state_type.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "signal_state" defined at railway.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__signal_state___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "success" defined at railway.ads:66, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__open_route__success
 use import "_gnatprove_standard".Main

 val success #"railway.ads" 66 0 0#"model_projected" "model_trace:3223" "name:Success"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "success" defined at railway.ads:66, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__open_route__success___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "success" defined at railway.ads:74, created in Gnat2Why.Decls.Translate_Variable *)
module Railway__move_train__success
 use import "_gnatprove_standard".Main

 val success #"railway.ads" 74 0 0#"model_projected" "name:Success" "model_trace:3290"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "success" defined at railway.ads:74, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Railway__move_train__success___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "correct_signals" defined at railway.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__correct_signals
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type

 function correct_signals 
   (railway__segment_state__fields : Railway__segment_state_type.__split_fields) (railway__signal_state__fields : Railway__signal_state_type.__split_fields) : bool
 
 predicate correct_signals__function_guard 
   (result : bool) (railway__segment_state__fields : Railway__segment_state_type.__split_fields) (railway__signal_state__fields : Railway__signal_state_type.__split_fields) 

end

(* Module for possibly declaring a logic function for "correct_segments" defined at railway.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__correct_segments
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type
 use        Railway__signal_state_type

 function correct_segments 
   (railway__segment_state__fields : Railway__segment_state_type.__split_fields) (railway__signal_state__fields : Railway__signal_state_type.__split_fields) : bool
 
 predicate correct_segments__function_guard 
   (result : bool) (railway__segment_state__fields : Railway__segment_state_type.__split_fields) (railway__signal_state__fields : Railway__signal_state_type.__split_fields) 

end

(* Module for possibly declaring a logic function for "open_route" defined at railway.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__open_route
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "move_train" defined at railway.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Railway__move_train
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "one_signal_state" defined at railway.ads:2, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__one_signal_state___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state

 predicate dynamic_invariant "inline" 
   (temp___expr_158 : int) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  (if (( temp___is_init_154 \/ (Railway__one_signal_state.first <= Railway__one_signal_state.last) )) then (
   (Railway__one_signal_state.dynamic_property Railway__one_signal_state.first Railway__one_signal_state.last temp___expr_158)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_159 : int) (temp___skip_top_level_160 : bool)  =
  true

end

(* Module giving axioms for type "route_type" defined at railway.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__route_type___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__route_type

 predicate dynamic_invariant "inline" 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool)  =
  (if (( temp___is_init_161 \/ (Railway__route_type.first <= Railway__route_type.last) )) then (
   (Railway__route_type.dynamic_property Railway__route_type.first Railway__route_type.last temp___expr_165)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool)  =
  true

end

(* Module giving axioms for type "one_segment_state" defined at railway.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__one_segment_state___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_segment_state

 predicate dynamic_invariant "inline" 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool)  =
  (if (( temp___is_init_168 \/ (Railway__one_segment_state.first <= Railway__one_segment_state.last) )) then (
   (Railway__one_segment_state.dynamic_property Railway__one_segment_state.first Railway__one_segment_state.last temp___expr_172)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool)  =
  true

end

(* Module giving axioms for type "segment_state_type" defined at railway.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__segment_state_type___axiom
 use import "_gnatprove_standard".Main
 use        Railway__segment_state_type

 predicate dynamic_invariant "inline" 
   (temp___expr_179 : Railway__segment_state_type.segment_state_type) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_180 : Railway__segment_state_type.segment_state_type) (temp___skip_top_level_181 : bool)  =
  true

end

(* Module giving axioms for type "signal_state_type" defined at railway.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Railway__signal_state_type___axiom
 use import "_gnatprove_standard".Main
 use        Railway__signal_state_type

 predicate dynamic_invariant "inline" 
   (temp___expr_189 : Railway__signal_state_type.signal_state_type) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_190 : Railway__signal_state_type.signal_state_type) (temp___skip_top_level_191 : bool)  =
  true

end
(* Module giving a program function and a defining axiom for the expression function "correct_signals" defined at railway.ads:38, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Railway__correct_signals___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__correct_signals
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state

 val correct_signals 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard result Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) ) /\ ( (result = True) <-> ( ( ( (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__left_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 1)) then (
   ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 2) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 3) )) else (
   true)) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_left (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 1)) then (
   ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 1) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 4) )) else (
   true)) ) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_right (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 1)) then (
   ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 2) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 3) )) else (
   true)) ) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__right_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 1)) then (
   ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 1) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) = 4) )) else (
   true)) ) ) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields}
 
 axiom correct_signals__post_axiom :
  (forall railway__segment_state__fields   : Railway__segment_state_type.__split_fields.
  (forall railway__signal_state__fields   : Railway__signal_state_type.__split_fields [(Railway__correct_signals.correct_signals railway__segment_state__fields railway__signal_state__fields)].
   ( ( (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = railway__segment_state__fields } True True True True) /\ (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = railway__signal_state__fields } True True True True) ) -> (let result = (Railway__correct_signals.correct_signals railway__segment_state__fields railway__signal_state__fields) in (
    (if ((Railway__correct_signals.correct_signals__function_guard result railway__segment_state__fields railway__signal_state__fields)) then (
     ( ( true /\ true ) /\ true )) else true)))
    )))
 
 axiom correct_signals__def_axiom :
  (forall railway__segment_state__fields   : Railway__segment_state_type.__split_fields.
  (forall railway__signal_state__fields   : Railway__signal_state_type.__split_fields [(Railway__correct_signals.correct_signals railway__segment_state__fields railway__signal_state__fields)].
   ( (let result = (Railway__correct_signals.correct_signals railway__segment_state__fields railway__signal_state__fields) in (
    (Railway__correct_signals.correct_signals__function_guard result railway__segment_state__fields railway__signal_state__fields)))
    -> ( ((Railway__correct_signals.correct_signals railway__segment_state__fields railway__signal_state__fields) = True) <-> ( ( ( (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__left_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 1)) then (
    ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 2) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 3) )) else (
    true)) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_left (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 1)) then (
    ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 1) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 4) )) else (
    true)) ) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_right (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 1)) then (
    ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 2) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 3) )) else (
    true)) ) /\ (if (((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__right_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 1)) then (
    ( ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 1) /\ ((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) = 4) )) else (
    true)) ) ) )))

end

(* Module giving a program function and a defining axiom for the expression function "correct_segments" defined at railway.ads:54, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Railway__correct_segments___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__correct_segments
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state

 val correct_segments 
   (__void_param : unit) : bool
  requires {  true }
  ensures {  ( ( (result = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard result Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) ) /\ ( (result = True) <-> ( ( ( (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) <> 4)) then (
   ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_left (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 0)) else (
   true)) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) <> 3)) then (
   ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__left_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 0)) else (
   true)) ) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) <> 4)) then (
   ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__right_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 0)) else (
   true)) ) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content }))) <> 3)) then (
   ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_right (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content }))) = 0)) else (
   true)) ) ) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields}
 
 axiom correct_segments__post_axiom :
  (forall railway__segment_state__fields   : Railway__segment_state_type.__split_fields.
  (forall railway__signal_state__fields   : Railway__signal_state_type.__split_fields [(Railway__correct_segments.correct_segments railway__segment_state__fields railway__signal_state__fields)].
   ( ( (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = railway__segment_state__fields } True True True True) /\ (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = railway__signal_state__fields } True True True True) ) -> (let result = (Railway__correct_segments.correct_segments railway__segment_state__fields railway__signal_state__fields) in (
    (if ((Railway__correct_segments.correct_segments__function_guard result railway__segment_state__fields railway__signal_state__fields)) then (
     ( ( true /\ true ) /\ true )) else true)))
    )))
 
 axiom correct_segments__def_axiom :
  (forall railway__segment_state__fields   : Railway__segment_state_type.__split_fields.
  (forall railway__signal_state__fields   : Railway__signal_state_type.__split_fields [(Railway__correct_segments.correct_segments railway__segment_state__fields railway__signal_state__fields)].
   ( (let result = (Railway__correct_segments.correct_segments railway__segment_state__fields railway__signal_state__fields) in (
    (Railway__correct_segments.correct_segments__function_guard result railway__segment_state__fields railway__signal_state__fields)))
    -> ( ((Railway__correct_segments.correct_segments railway__segment_state__fields railway__signal_state__fields) = True) <-> ( ( ( (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__left (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) <> 4)) then (
    ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_left (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 0)) else (
    true)) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) <> 3)) then (
    ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__left_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 0)) else (
    true)) ) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__middle (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) <> 4)) then (
    ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__right_middle (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 0)) else (
    true)) ) /\ (if (((Railway__one_segment_state__rep.to_rep (Railway__segment_state_type.rec__railway__segment_state_type__right (Railway__segment_state_type.__split_fields { Railway__segment_state_type.__split_fields = railway__segment_state__fields }))) <> 3)) then (
    ((Railway__one_signal_state__rep.to_rep (Railway__signal_state_type.rec__railway__signal_state_type__middle_right (Railway__signal_state_type.__split_fields { Railway__signal_state_type.__split_fields = railway__signal_state__fields }))) = 0)) else (
    true)) ) ) )))

end

(* Module for declaring a program function (and possibly an axiom) for "open_route" defined at railway.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Railway__open_route___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__correct_signals
 use        Railway__correct_segments
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state

 val open_route 
   (route : int) (success : bool__ref) : unit
  requires {  ( ((epsilon temp___result_196 : bool.
   ( (temp___result_196 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_196 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_197 : bool.
   ( (temp___result_197 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_197 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) }
  ensures {  ( ( ((epsilon temp___result_198 : bool.
   ( (temp___result_198 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_198 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_199 : bool.
   ( (temp___result_199 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_199 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) /\ ( (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True True True True) /\ (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True True True True) ) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields}
  writes {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields, success}

end

(* Module for declaring a program function (and possibly an axiom) for "move_train" defined at railway.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Railway__move_train___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use import "_gnatprove_standard".Main
 use        Railway__correct_signals
 use        Railway__correct_segments
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state

 val move_train 
   (route : int) (success : bool__ref) : unit
  requires {  ( ((epsilon temp___result_200 : bool.
   ( (temp___result_200 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_200 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_201 : bool.
   ( (temp___result_201 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_201 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) }
  ensures {  ( ( ((epsilon temp___result_202 : bool.
   ( (temp___result_202 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_202 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_203 : bool.
   ( (temp___result_203 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_203 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) /\ ( (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True True True True) /\ (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True True True True) ) ) }
  reads {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields}
  writes {Railway__segment_state.segment_state__split_fields, Railway__signal_state.signal_state__split_fields, success}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "railway" defined at railway.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Railway__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state___axiom
 use        Railway__one_segment_state___axiom
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state___axiom
 use        Railway__signal_state___axiom

 let def #"railway.ads" 1 0 0#"GP_Subp:railway.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"railway.ads" 1 0 0# true }
  ensures { #"railway.ads" 1 0 0# true }
   =
  ( (#"railway.ads" 1 0 0# ());
  (#"railway.ads" 2 0 0# ());
  (#"railway.ads" 4 0 0# ());
  (#"railway.ads" 13 0 0# ());
  (#"railway.ads" 20 0 0# ());
  (#"railway.ads" 27 0 0# ());
  (#"railway.ads" 35 0 0# ());
  (#"railway.ads" 35 0 0# ());
  (#"railway.ads" 35 0 0# ( (let railway__segment_state__assume = { Railway__segment_state_type.__split_fields = { Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(5)); Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(5)); Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(5)) } } in (
   #"railway.ads" 35 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(railway__segment_state__assume)) )))
  ;
  #"railway.ads" 35 0 0# assume { #"railway.ads" 35 0 0# (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True False True True) } ));
  (#"railway.ads" 36 0 0# ());
  (#"railway.ads" 36 0 0# ());
  (#"railway.ads" 36 0 0# ( (let railway__signal_state__assume = { Railway__signal_state_type.__split_fields = { Railway__signal_state_type.rec__railway__signal_state_type__left_middle = (Railway__one_signal_state__rep.of_rep(1)); Railway__signal_state_type.rec__railway__signal_state_type__middle_left = (Railway__one_signal_state__rep.of_rep(1)); Railway__signal_state_type.rec__railway__signal_state_type__middle_right = (Railway__one_signal_state__rep.of_rep(1)); Railway__signal_state_type.rec__railway__signal_state_type__right_middle = (Railway__one_signal_state__rep.of_rep(1)) } } in (
   #"railway.ads" 36 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(railway__signal_state__assume)) )))
  ;
  #"railway.ads" 36 0 0# assume { #"railway.ads" 36 0 0# (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True False True True) } ));
  (#"railway.ads" 38 0 0# ());
  (#"railway.ads" 54 0 0# ());
  (#"railway.ads" 66 0 0# ());
  (#"railway.ads" 72 0 0# ());
  (#"railway.ads" 70 0 0# ());
  (#"railway.ads" 69 0 0# ());
  (#"railway.ads" 68 0 0# ());
  (#"railway.ads" 74 0 0# ());
  (#"railway.ads" 80 0 0# ());
  (#"railway.ads" 78 0 0# ());
  (#"railway.ads" 77 0 0# ());
  (#"railway.ads" 76 0 0# ());
  (#"railway.ads" 76 0 0# ());
  (#"railway.ads" 76 0 0# ());
  (#"railway.ads" 76 0 0# ());
  (#"railway.ads" 38 0 0# ());
  (#"railway.ads" 54 0 0# ());
  (#"railway.adb" 1 0 0# ());
  (#"railway.adb" 2 0 0# ());
  (#"railway.adb" 45 0 0# ());
  ( "GP_Sloc:railway.adb:87:1" (#"railway.adb" 87 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "correct_signals" defined at railway.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__correct_signals__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state___axiom
 use        Railway__one_segment_state___axiom
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state___axiom
 use        Railway__signal_state___axiom

 val railway__correct_signals__result "model_projected" "model_trace:3069@result" "name:Correct_Signals"  : bool__ref 
 
 let def #"railway.ads" 38 0 0#"W:diverges:N" "GP_Subp:railway.ads:38" 
   (__void_param : unit)
  requires { #"railway.ads" 38 0 0# true }
  ensures { #"railway.ads" 38 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram railway.ads:38 *)
  ;
  #"railway.ads" 38 0 0# assume { #"railway.ads" 38 0 0# (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True False True True) };
  #"railway.ads" 38 0 0# assume { #"railway.ads" 38 0 0# (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True False True True) };
  #"railway.ads" 38 0 0# assume { #"railway.ads" 38 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:38 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:38 *)
  ;
  #"railway.ads" 38 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram railway.ads:38 *)
  ;
  #"railway.ads" 38 0 0# assume { #"railway.ads" 38 0 0# true };
  #"railway.ads" 38 0 0# try
   ( ( "GP_Sloc:railway.ads:49:66" (#"railway.ads" 49 0 0# ( #"railway.ads" 49 0 0# railway__correct_signals__result.bool__content <- ( ( ( ( (if (((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__left_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 2)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 3)))) else (
    (Boolean.of_int(1)))) && (if (((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__middle_left((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 1)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 4)))) else (
    (Boolean.of_int(1)))) ) && (if (((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__middle_right((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 2)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 3)))) else (
    (Boolean.of_int(1)))) ) && (if (((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__right_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 1)) then (
    (Boolean.andb(((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 1)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 4)))) else (
    (Boolean.of_int(1)))) ) );
   #"railway.ads" 49 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  railway__correct_signals__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "correct_segments" defined at railway.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__correct_segments__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__one_signal_state___axiom
 use        Railway__one_segment_state___axiom
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state___axiom
 use        Railway__signal_state___axiom

 val railway__correct_segments__result "model_projected" "model_trace:3150@result" "name:Correct_Segments"  : bool__ref 
 
 let def #"railway.ads" 54 0 0#"W:diverges:N" "GP_Subp:railway.ads:54" 
   (__void_param : unit)
  requires { #"railway.ads" 54 0 0# true }
  ensures { #"railway.ads" 54 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram railway.ads:54 *)
  ;
  #"railway.ads" 54 0 0# assume { #"railway.ads" 54 0 0# (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True False True True) };
  #"railway.ads" 54 0 0# assume { #"railway.ads" 54 0 0# (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True False True True) };
  #"railway.ads" 54 0 0# assume { #"railway.ads" 54 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:54 *)
  ;
  #"railway.ads" 54 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram railway.ads:54 *)
  ;
  #"railway.ads" 54 0 0# assume { #"railway.ads" 54 0 0# true };
  #"railway.ads" 54 0 0# try
   ( ( "GP_Sloc:railway.ads:62:48" (#"railway.ads" 62 0 0# ( #"railway.ads" 62 0 0# railway__correct_segments__result.bool__content <- ( (Boolean.andb((Boolean.andb((Boolean.andb((if (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) <> 4)) then (
    ((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__middle_left((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 0)) else (
    (Boolean.of_int(1))))) ((if (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) <> 3)) then (
    ((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__left_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 0)) else (
    (Boolean.of_int(1))))))) ((if (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) <> 4)) then (
    ((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__right_middle((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 0)) else (
    (Boolean.of_int(1))))))) ((if (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) <> 3)) then (
    ((Railway__one_signal_state__rep.to_rep((Railway__signal_state_type.rec__railway__signal_state_type__middle_right((Railway__signal_state_type.__split_fields({ Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content })))))) = 0)) else (
    (Boolean.of_int(1)))))) );
   #"railway.ads" 62 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  railway__correct_segments__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "open_route" defined at railway.ads:66, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__open_route__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Railway__correct_signals
 use        Railway__correct_signals___axiom
 use        Railway__correct_segments
 use        Railway__correct_segments___axiom
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__route_type___axiom
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__open_route__route
 use        Railway__open_route__success
 use        Railway__one_signal_state___axiom
 use        Railway__route_type___axiom
 use        Railway__one_segment_state___axiom
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state___axiom
 use        Railway__signal_state___axiom
 use        Railway__correct_signals___axiom
 use        Railway__correct_segments___axiom
 use        Railway__open_route__route___axiom
 use        Railway__open_route__success___axiom

 let def #"railway.ads" 66 0 0#"W:diverges:N" "GP_Subp:railway.ads:66" 
   (__void_param : unit)
  requires { #"railway.ads" 66 0 0# true }
  ensures { #"railway.ads" 66 0 0# (#"railway.ads" 72 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:railway.ads:72:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:       Post => Correct_Signals and Correct_Segments;
               ^ railway.ads:72:16:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:3271" "GP_Sloc:railway.ads:72:16" ((epsilon temp___result_238 : bool.
   ( (temp___result_238 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_238 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) /\ ( "GP_Pretty_Ada:3272" "GP_Sloc:railway.ads:72:36" ((epsilon temp___result_239 : bool.
   ( (temp___result_239 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_239 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram railway.ads:66 *)
  ;
   assume {  (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True False True True) };
   assume {  (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True False True True) };
   assume {  (Railway__route_type___axiom.dynamic_invariant Railway__open_route__route.route True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:66 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:66 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Railway__correct_signals___axiom.correct_signals(()))) ((Railway__correct_segments___axiom.correct_segments(())))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram railway.ads:66 *)
  ;
   assume {  ( ((epsilon temp___result_236 : bool.
   ( (temp___result_236 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_236 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_237 : bool.
   ( (temp___result_237 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_237 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) };
   try
   ( ( "GP_Sloc:railway.adb:4:39" (#"railway.adb" 4 0 0# ()) );
   ( "GP_Sloc:railway.adb:4:7" (#"railway.adb" 4 0 0# (if ((Boolean.andb((Railway__open_route__route.route = 4)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
    ( ( "GP_Sloc:railway.adb:5:10" (#"railway.adb" 5 0 0# ()) );
    ( "GP_Sloc:railway.adb:5:29" (#"railway.adb" 5 0 0# (let temp___235 = (let temp___234 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
     ( #"railway.adb" 5 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___234)))) in (
      ()))
      end ;
     { ( temp___234 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___234)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(3)) } } )))
     in (
     #"railway.adb" 5 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___235)) )))
    ) );
    ( "GP_Sloc:railway.adb:6:18" (#"railway.adb" 6 0 0# #"railway.adb" 6 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
    ( "GP_Sloc:railway.adb:7:7" (if ((Boolean.andb((Boolean.andb((Railway__open_route__route.route = 0)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
     ( ( "GP_Sloc:railway.adb:9:10" (#"railway.adb" 9 0 0# ()) );
     ( "GP_Sloc:railway.adb:9:29" (#"railway.adb" 9 0 0# (let temp___229 = (let temp___228 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
      ( #"railway.adb" 9 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___228)))) in (
       ()))
       end ;
      { ( temp___228 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___228)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(2)) } } )))
      in (
      #"railway.adb" 9 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___229)) )))
     ) );
     ( "GP_Sloc:railway.adb:10:10" (#"railway.adb" 10 0 0# ()) );
     ( "GP_Sloc:railway.adb:10:31" (#"railway.adb" 10 0 0# (let temp___231 = (let temp___230 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
      ( #"railway.adb" 10 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___230)))) in (
       ()))
       end ;
      { ( temp___230 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___230)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(3)) } } )))
      in (
      #"railway.adb" 10 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___231)) )))
     ) );
     ( "GP_Sloc:railway.adb:11:10" (#"railway.adb" 11 0 0# ()) );
     ( "GP_Sloc:railway.adb:11:35" (#"railway.adb" 11 0 0# (let temp___233 = (let temp___232 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
      ( #"railway.adb" 11 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__left_middle((Railway__signal_state_type.__split_fields(temp___232)))) in (
       ()))
       end ;
      { ( temp___232 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___232)) ) with Railway__signal_state_type.rec__railway__signal_state_type__left_middle = (Railway__one_signal_state__rep.of_rep(1)) } } )))
      in (
      #"railway.adb" 11 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___233)) )))
     ) );
     ( "GP_Sloc:railway.adb:12:18" (#"railway.adb" 12 0 0# #"railway.adb" 12 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
     ( "GP_Sloc:railway.adb:13:7" (if ((Boolean.andb((Boolean.andb((Railway__open_route__route.route = 1)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
      ( ( "GP_Sloc:railway.adb:15:10" (#"railway.adb" 15 0 0# ()) );
      ( "GP_Sloc:railway.adb:15:31" (#"railway.adb" 15 0 0# (let temp___223 = (let temp___222 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
       ( #"railway.adb" 15 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___222)))) in (
        ()))
        end ;
       { ( temp___222 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___222)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(2)) } } )))
       in (
       #"railway.adb" 15 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___223)) )))
      ) );
      ( "GP_Sloc:railway.adb:16:10" (#"railway.adb" 16 0 0# ()) );
      ( "GP_Sloc:railway.adb:16:30" (#"railway.adb" 16 0 0# (let temp___225 = (let temp___224 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
       ( #"railway.adb" 16 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___224)))) in (
        ()))
        end ;
       { ( temp___224 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___224)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(3)) } } )))
       in (
       #"railway.adb" 16 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___225)) )))
      ) );
      ( "GP_Sloc:railway.adb:17:10" (#"railway.adb" 17 0 0# ()) );
      ( "GP_Sloc:railway.adb:17:36" (#"railway.adb" 17 0 0# (let temp___227 = (let temp___226 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
       ( #"railway.adb" 17 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__middle_right((Railway__signal_state_type.__split_fields(temp___226)))) in (
        ()))
        end ;
       { ( temp___226 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___226)) ) with Railway__signal_state_type.rec__railway__signal_state_type__middle_right = (Railway__one_signal_state__rep.of_rep(1)) } } )))
       in (
       #"railway.adb" 17 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___227)) )))
      ) );
      ( "GP_Sloc:railway.adb:18:18" (#"railway.adb" 18 0 0# #"railway.adb" 18 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
      ( "GP_Sloc:railway.adb:19:7" (if ((Boolean.andb((Railway__open_route__route.route = 5)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) then (
       ( ( "GP_Sloc:railway.adb:20:10" (#"railway.adb" 20 0 0# ()) );
       ( "GP_Sloc:railway.adb:20:30" (#"railway.adb" 20 0 0# (let temp___221 = (let temp___220 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
        ( #"railway.adb" 20 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___220)))) in (
         ()))
         end ;
        { ( temp___220 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___220)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(2)) } } )))
        in (
        #"railway.adb" 20 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___221)) )))
       ) );
       ( "GP_Sloc:railway.adb:21:18" (#"railway.adb" 21 0 0# #"railway.adb" 21 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
       ( "GP_Sloc:railway.adb:22:7" (if ((Boolean.andb((Railway__open_route__route.route = 6)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
        ( ( "GP_Sloc:railway.adb:23:10" (#"railway.adb" 23 0 0# ()) );
        ( "GP_Sloc:railway.adb:23:30" (#"railway.adb" 23 0 0# (let temp___219 = (let temp___218 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
         ( #"railway.adb" 23 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___218)))) in (
          ()))
          end ;
         { ( temp___218 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___218)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(4)) } } )))
         in (
         #"railway.adb" 23 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___219)) )))
        ) );
        ( "GP_Sloc:railway.adb:24:18" (#"railway.adb" 24 0 0# #"railway.adb" 24 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
        ( "GP_Sloc:railway.adb:25:7" (if ((Boolean.andb((Boolean.andb((Railway__open_route__route.route = 2)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
         ( ( "GP_Sloc:railway.adb:27:10" (#"railway.adb" 27 0 0# ()) );
         ( "GP_Sloc:railway.adb:27:30" (#"railway.adb" 27 0 0# (let temp___213 = (let temp___212 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
          ( #"railway.adb" 27 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___212)))) in (
           ()))
           end ;
          { ( temp___212 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___212)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(1)) } } )))
          in (
          #"railway.adb" 27 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___213)) )))
         ) );
         ( "GP_Sloc:railway.adb:28:10" (#"railway.adb" 28 0 0# ()) );
         ( "GP_Sloc:railway.adb:28:31" (#"railway.adb" 28 0 0# (let temp___215 = (let temp___214 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
          ( #"railway.adb" 28 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___214)))) in (
           ()))
           end ;
          { ( temp___214 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___214)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(4)) } } )))
          in (
          #"railway.adb" 28 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___215)) )))
         ) );
         ( "GP_Sloc:railway.adb:29:10" (#"railway.adb" 29 0 0# ()) );
         ( "GP_Sloc:railway.adb:29:36" (#"railway.adb" 29 0 0# (let temp___217 = (let temp___216 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
          ( #"railway.adb" 29 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__right_middle((Railway__signal_state_type.__split_fields(temp___216)))) in (
           ()))
           end ;
          { ( temp___216 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___216)) ) with Railway__signal_state_type.rec__railway__signal_state_type__right_middle = (Railway__one_signal_state__rep.of_rep(1)) } } )))
          in (
          #"railway.adb" 29 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___217)) )))
         ) );
         ( "GP_Sloc:railway.adb:30:18" (#"railway.adb" 30 0 0# #"railway.adb" 30 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
         ( "GP_Sloc:railway.adb:31:7" (if ((Boolean.andb((Boolean.andb((Railway__open_route__route.route = 3)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 5)))) then (
          ( ( "GP_Sloc:railway.adb:33:10" (#"railway.adb" 33 0 0# ()) );
          ( "GP_Sloc:railway.adb:33:31" (#"railway.adb" 33 0 0# (let temp___207 = (let temp___206 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
           ( #"railway.adb" 33 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___206)))) in (
            ()))
            end ;
           { ( temp___206 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___206)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(1)) } } )))
           in (
           #"railway.adb" 33 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___207)) )))
          ) );
          ( "GP_Sloc:railway.adb:34:10" (#"railway.adb" 34 0 0# ()) );
          ( "GP_Sloc:railway.adb:34:29" (#"railway.adb" 34 0 0# (let temp___209 = (let temp___208 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
           ( #"railway.adb" 34 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___208)))) in (
            ()))
            end ;
           { ( temp___208 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___208)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(4)) } } )))
           in (
           #"railway.adb" 34 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___209)) )))
          ) );
          ( "GP_Sloc:railway.adb:35:10" (#"railway.adb" 35 0 0# ()) );
          ( "GP_Sloc:railway.adb:35:35" (#"railway.adb" 35 0 0# (let temp___211 = (let temp___210 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
           ( #"railway.adb" 35 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__middle_left((Railway__signal_state_type.__split_fields(temp___210)))) in (
            ()))
            end ;
           { ( temp___210 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___210)) ) with Railway__signal_state_type.rec__railway__signal_state_type__middle_left = (Railway__one_signal_state__rep.of_rep(1)) } } )))
           in (
           #"railway.adb" 35 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___211)) )))
          ) );
          ( "GP_Sloc:railway.adb:36:18" (#"railway.adb" 36 0 0# #"railway.adb" 36 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
          ( "GP_Sloc:railway.adb:37:7" (if ((Boolean.andb((Railway__open_route__route.route = 7)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 0)))) then (
           ( ( "GP_Sloc:railway.adb:38:10" (#"railway.adb" 38 0 0# ()) );
           ( "GP_Sloc:railway.adb:38:29" (#"railway.adb" 38 0 0# (let temp___205 = (let temp___204 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
            ( #"railway.adb" 38 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___204)))) in (
             ()))
             end ;
            { ( temp___204 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___204)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(1)) } } )))
            in (
            #"railway.adb" 38 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___205)) )))
           ) );
           ( "GP_Sloc:railway.adb:39:18" (#"railway.adb" 39 0 0# #"railway.adb" 39 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
           ( "GP_Sloc:railway.adb:41:18" (#"railway.adb" 41 0 0# #"railway.adb" 41 0 0# Railway__open_route__success.success.bool__content <- ( (Boolean.of_int(0)) )) ))) ))) ))) ))) ))) ))) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Railway__correct_signals___axiom.correct_signals(()))) ((Railway__correct_segments___axiom.correct_segments(())))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "move_train" defined at railway.ads:74, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Railway__move_train__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Railway__correct_signals
 use        Railway__correct_signals___axiom
 use        Railway__correct_segments
 use        Railway__correct_segments___axiom
 use        Railway__one_signal_state
 use        Railway__one_signal_state__rep
 use        Railway__route_type___axiom
 use        Railway__one_segment_state
 use        Railway__one_segment_state__rep
 use        Railway__segment_state_type
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state
 use        Railway__signal_state
 use        Railway__move_train__route
 use        Railway__move_train__success
 use        Railway__one_signal_state___axiom
 use        Railway__route_type___axiom
 use        Railway__one_segment_state___axiom
 use        Railway__segment_state_type___axiom
 use        Railway__signal_state_type___axiom
 use        Railway__segment_state___axiom
 use        Railway__signal_state___axiom
 use        Railway__correct_signals___axiom
 use        Railway__correct_segments___axiom
 use        Railway__move_train__route___axiom
 use        Railway__move_train__success___axiom

 let def #"railway.ads" 74 0 0#"W:diverges:N" "GP_Subp:railway.ads:74" 
   (__void_param : unit)
  requires { #"railway.ads" 74 0 0# true }
  ensures { #"railway.ads" 74 0 0# (#"railway.ads" 80 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:railway.ads:80:16" "GP_Id:1" "comment:       Post => Correct_Signals and Correct_Segments;
               ^ railway.ads:80:16:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3338" "GP_Sloc:railway.ads:80:16" ((epsilon temp___result_274 : bool.
   ( (temp___result_274 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_274 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) /\ ( "GP_Pretty_Ada:3339" "GP_Sloc:railway.ads:80:36" ((epsilon temp___result_275 : bool.
   ( (temp___result_275 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_275 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram railway.ads:74 *)
  ;
   assume {  (Railway__segment_state_type___axiom.dynamic_invariant { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } True False True True) };
   assume {  (Railway__signal_state_type___axiom.dynamic_invariant { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } True False True True) };
   assume {  (Railway__route_type___axiom.dynamic_invariant Railway__move_train__route.route True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram railway.ads:74 *)
  ;
  () (* Check for RTE in the Pre of the subprogram railway.ads:74 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Railway__correct_signals___axiom.correct_signals(()))) ((Railway__correct_segments___axiom.correct_segments(())))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram railway.ads:74 *)
  ;
   assume {  ( ((epsilon temp___result_272 : bool.
   ( (temp___result_272 = (Railway__correct_signals.correct_signals Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_signals.correct_signals__function_guard temp___result_272 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) /\ ((epsilon temp___result_273 : bool.
   ( (temp___result_273 = (Railway__correct_segments.correct_segments Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content)) /\ (Railway__correct_segments.correct_segments__function_guard temp___result_273 Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content) )) = True) ) };
   try
   ( ( "GP_Sloc:railway.adb:47:39" (#"railway.adb" 47 0 0# ()) );
   ( "GP_Sloc:railway.adb:47:7" (#"railway.adb" 47 0 0# (if ((Boolean.andb((Railway__move_train__route.route = 4)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 3)))) then (
    ( ( "GP_Sloc:railway.adb:48:10" (#"railway.adb" 48 0 0# ()) );
    ( "GP_Sloc:railway.adb:48:29" (#"railway.adb" 48 0 0# (let temp___271 = (let temp___270 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
     ( #"railway.adb" 48 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___270)))) in (
      ()))
      end ;
     { ( temp___270 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___270)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(0)) } } )))
     in (
     #"railway.adb" 48 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___271)) )))
    ) );
    ( "GP_Sloc:railway.adb:49:18" (#"railway.adb" 49 0 0# #"railway.adb" 49 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
    ( "GP_Sloc:railway.adb:50:7" (if ((Boolean.andb((Boolean.andb((Railway__move_train__route.route = 0)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 2)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 3)))) then (
     ( ( "GP_Sloc:railway.adb:52:10" (#"railway.adb" 52 0 0# ()) );
     ( "GP_Sloc:railway.adb:52:29" (#"railway.adb" 52 0 0# (let temp___265 = (let temp___264 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
      ( #"railway.adb" 52 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___264)))) in (
       ()))
       end ;
      { ( temp___264 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___264)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(5)) } } )))
      in (
      #"railway.adb" 52 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___265)) )))
     ) );
     ( "GP_Sloc:railway.adb:53:10" (#"railway.adb" 53 0 0# ()) );
     ( "GP_Sloc:railway.adb:53:31" (#"railway.adb" 53 0 0# (let temp___267 = (let temp___266 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
      ( #"railway.adb" 53 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___266)))) in (
       ()))
       end ;
      { ( temp___266 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___266)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(0)) } } )))
      in (
      #"railway.adb" 53 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___267)) )))
     ) );
     ( "GP_Sloc:railway.adb:54:10" (#"railway.adb" 54 0 0# ()) );
     ( "GP_Sloc:railway.adb:54:35" (#"railway.adb" 54 0 0# (let temp___269 = (let temp___268 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
      ( #"railway.adb" 54 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__left_middle((Railway__signal_state_type.__split_fields(temp___268)))) in (
       ()))
       end ;
      { ( temp___268 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___268)) ) with Railway__signal_state_type.rec__railway__signal_state_type__left_middle = (Railway__one_signal_state__rep.of_rep(0)) } } )))
      in (
      #"railway.adb" 54 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___269)) )))
     ) );
     ( "GP_Sloc:railway.adb:55:18" (#"railway.adb" 55 0 0# #"railway.adb" 55 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
     ( "GP_Sloc:railway.adb:56:7" (if ((Boolean.andb((Boolean.andb((Railway__move_train__route.route = 1)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 2)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 3)))) then (
      ( ( "GP_Sloc:railway.adb:58:10" (#"railway.adb" 58 0 0# ()) );
      ( "GP_Sloc:railway.adb:58:31" (#"railway.adb" 58 0 0# (let temp___259 = (let temp___258 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
       ( #"railway.adb" 58 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___258)))) in (
        ()))
        end ;
       { ( temp___258 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___258)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(5)) } } )))
       in (
       #"railway.adb" 58 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___259)) )))
      ) );
      ( "GP_Sloc:railway.adb:59:10" (#"railway.adb" 59 0 0# ()) );
      ( "GP_Sloc:railway.adb:59:30" (#"railway.adb" 59 0 0# (let temp___261 = (let temp___260 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
       ( #"railway.adb" 59 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___260)))) in (
        ()))
        end ;
       { ( temp___260 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___260)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(0)) } } )))
       in (
       #"railway.adb" 59 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___261)) )))
      ) );
      ( "GP_Sloc:railway.adb:60:10" (#"railway.adb" 60 0 0# ()) );
      ( "GP_Sloc:railway.adb:60:36" (#"railway.adb" 60 0 0# (let temp___263 = (let temp___262 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
       ( #"railway.adb" 60 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__middle_right((Railway__signal_state_type.__split_fields(temp___262)))) in (
        ()))
        end ;
       { ( temp___262 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___262)) ) with Railway__signal_state_type.rec__railway__signal_state_type__middle_right = (Railway__one_signal_state__rep.of_rep(0)) } } )))
       in (
       #"railway.adb" 60 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___263)) )))
      ) );
      ( "GP_Sloc:railway.adb:61:18" (#"railway.adb" 61 0 0# #"railway.adb" 61 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
      ( "GP_Sloc:railway.adb:62:7" (if ((Boolean.andb((Railway__move_train__route.route = 5)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 2)))) then (
       ( ( "GP_Sloc:railway.adb:63:10" (#"railway.adb" 63 0 0# ()) );
       ( "GP_Sloc:railway.adb:63:30" (#"railway.adb" 63 0 0# (let temp___257 = (let temp___256 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
        ( #"railway.adb" 63 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___256)))) in (
         ()))
         end ;
        { ( temp___256 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___256)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(5)) } } )))
        in (
        #"railway.adb" 63 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___257)) )))
       ) );
       ( "GP_Sloc:railway.adb:64:18" (#"railway.adb" 64 0 0# #"railway.adb" 64 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
       ( "GP_Sloc:railway.adb:65:7" (if ((Boolean.andb((Railway__move_train__route.route = 6)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 4)))) then (
        ( ( "GP_Sloc:railway.adb:66:10" (#"railway.adb" 66 0 0# ()) );
        ( "GP_Sloc:railway.adb:66:30" (#"railway.adb" 66 0 0# (let temp___255 = (let temp___254 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
         ( #"railway.adb" 66 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___254)))) in (
          ()))
          end ;
         { ( temp___254 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___254)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(0)) } } )))
         in (
         #"railway.adb" 66 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___255)) )))
        ) );
        ( "GP_Sloc:railway.adb:67:18" (#"railway.adb" 67 0 0# #"railway.adb" 67 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
        ( "GP_Sloc:railway.adb:68:7" (if ((Boolean.andb((Boolean.andb((Railway__move_train__route.route = 2)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 1)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 4)))) then (
         ( ( "GP_Sloc:railway.adb:70:10" (#"railway.adb" 70 0 0# ()) );
         ( "GP_Sloc:railway.adb:70:30" (#"railway.adb" 70 0 0# (let temp___249 = (let temp___248 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
          ( #"railway.adb" 70 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__right((Railway__segment_state_type.__split_fields(temp___248)))) in (
           ()))
           end ;
          { ( temp___248 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___248)) ) with Railway__segment_state_type.rec__railway__segment_state_type__right = (Railway__one_segment_state__rep.of_rep(5)) } } )))
          in (
          #"railway.adb" 70 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___249)) )))
         ) );
         ( "GP_Sloc:railway.adb:71:10" (#"railway.adb" 71 0 0# ()) );
         ( "GP_Sloc:railway.adb:71:31" (#"railway.adb" 71 0 0# (let temp___251 = (let temp___250 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
          ( #"railway.adb" 71 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___250)))) in (
           ()))
           end ;
          { ( temp___250 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___250)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(0)) } } )))
          in (
          #"railway.adb" 71 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___251)) )))
         ) );
         ( "GP_Sloc:railway.adb:72:10" (#"railway.adb" 72 0 0# ()) );
         ( "GP_Sloc:railway.adb:72:36" (#"railway.adb" 72 0 0# (let temp___253 = (let temp___252 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
          ( #"railway.adb" 72 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__right_middle((Railway__signal_state_type.__split_fields(temp___252)))) in (
           ()))
           end ;
          { ( temp___252 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___252)) ) with Railway__signal_state_type.rec__railway__signal_state_type__right_middle = (Railway__one_signal_state__rep.of_rep(0)) } } )))
          in (
          #"railway.adb" 72 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___253)) )))
         ) );
         ( "GP_Sloc:railway.adb:73:18" (#"railway.adb" 73 0 0# #"railway.adb" 73 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
         ( "GP_Sloc:railway.adb:74:7" (if ((Boolean.andb((Boolean.andb((Railway__move_train__route.route = 3)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 1)))) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 4)))) then (
          ( ( "GP_Sloc:railway.adb:76:10" (#"railway.adb" 76 0 0# ()) );
          ( "GP_Sloc:railway.adb:76:31" (#"railway.adb" 76 0 0# (let temp___243 = (let temp___242 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
           ( #"railway.adb" 76 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__middle((Railway__segment_state_type.__split_fields(temp___242)))) in (
            ()))
            end ;
           { ( temp___242 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___242)) ) with Railway__segment_state_type.rec__railway__segment_state_type__middle = (Railway__one_segment_state__rep.of_rep(5)) } } )))
           in (
           #"railway.adb" 76 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___243)) )))
          ) );
          ( "GP_Sloc:railway.adb:77:10" (#"railway.adb" 77 0 0# ()) );
          ( "GP_Sloc:railway.adb:77:29" (#"railway.adb" 77 0 0# (let temp___245 = (let temp___244 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
           ( #"railway.adb" 77 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___244)))) in (
            ()))
            end ;
           { ( temp___244 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___244)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(0)) } } )))
           in (
           #"railway.adb" 77 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___245)) )))
          ) );
          ( "GP_Sloc:railway.adb:78:10" (#"railway.adb" 78 0 0# ()) );
          ( "GP_Sloc:railway.adb:78:35" (#"railway.adb" 78 0 0# (let temp___247 = (let temp___246 = { Railway__signal_state_type.__split_fields = Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content } in (
           ( #"railway.adb" 78 0 0# abstract ensures {true}(let _ = (Railway__signal_state_type.rec__railway__signal_state_type__middle_left((Railway__signal_state_type.__split_fields(temp___246)))) in (
            ()))
            end ;
           { ( temp___246 ) with Railway__signal_state_type.__split_fields = { ( (Railway__signal_state_type.__split_fields(temp___246)) ) with Railway__signal_state_type.rec__railway__signal_state_type__middle_left = (Railway__one_signal_state__rep.of_rep(0)) } } )))
           in (
           #"railway.adb" 78 0 0# Railway__signal_state.signal_state__split_fields.Railway__signal_state_type.__split_fields__content <- ( (Railway__signal_state_type.__split_fields(temp___247)) )))
          ) );
          ( "GP_Sloc:railway.adb:79:18" (#"railway.adb" 79 0 0# #"railway.adb" 79 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
          ( "GP_Sloc:railway.adb:80:7" (if ((Boolean.andb((Railway__move_train__route.route = 7)) (((Railway__one_segment_state__rep.to_rep((Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields({ Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content })))))) = 1)))) then (
           ( ( "GP_Sloc:railway.adb:81:10" (#"railway.adb" 81 0 0# ()) );
           ( "GP_Sloc:railway.adb:81:29" (#"railway.adb" 81 0 0# (let temp___241 = (let temp___240 = { Railway__segment_state_type.__split_fields = Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content } in (
            ( #"railway.adb" 81 0 0# abstract ensures {true}(let _ = (Railway__segment_state_type.rec__railway__segment_state_type__left((Railway__segment_state_type.__split_fields(temp___240)))) in (
             ()))
             end ;
            { ( temp___240 ) with Railway__segment_state_type.__split_fields = { ( (Railway__segment_state_type.__split_fields(temp___240)) ) with Railway__segment_state_type.rec__railway__segment_state_type__left = (Railway__one_segment_state__rep.of_rep(5)) } } )))
            in (
            #"railway.adb" 81 0 0# Railway__segment_state.segment_state__split_fields.Railway__segment_state_type.__split_fields__content <- ( (Railway__segment_state_type.__split_fields(temp___241)) )))
           ) );
           ( "GP_Sloc:railway.adb:82:18" (#"railway.adb" 82 0 0# #"railway.adb" 82 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(1)) )) ) )) else (
           ( "GP_Sloc:railway.adb:84:18" (#"railway.adb" 84 0 0# #"railway.adb" 84 0 0# Railway__move_train__success.success.bool__content <- ( (Boolean.of_int(0)) )) ))) ))) ))) ))) ))) ))) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Railway__correct_signals___axiom.correct_signals(()))) ((Railway__correct_segments___axiom.correct_segments(())))) in (
   ()))
   end  )
end
